angular.module("app.config", [])

.constant("appSettings", {
	"DEV": true,
	"API": {
		"HOST": ""
	},
	"WULIAN_OEM_ID_LENGTH": 12
})

;
(function (ng, _) {
  'use strict';

  var
    underscoreModule = ng.module('angular-underscore', []),
    utilsModule = ng.module('angular-underscore/utils', []),
    filtersModule = ng.module('angular-underscore/filters', []);

  // begin custom _

  function propGetterFactory(prop) {
    return function(obj) {return obj[prop];};
  }

  _._ = _;

  // Shiv "min", "max" ,"sortedIndex" to accept property predicate.
  _.each(['min', 'max', 'sortedIndex'], function(fnName) {
    _[fnName] = _.wrap(_[fnName], function(fn) {
      var args = _.toArray(arguments).slice(1);

      if(_.isString(args[2])) {
        // for "sortedIndex", transmuting str to property getter
        args[2] = propGetterFactory(args[2]);
      }
      else if(_.isString(args[1])) {
        // for "min" or "max", transmuting str to property getter
        args[1] = propGetterFactory(args[1]);
      }

      return fn.apply(_, args);
    });
  });

  // Shiv "filter", "reject" to angular's built-in,
  // and reserve underscore's feature(works on obj).
  ng.injector(['ng']).invoke(['$filter', function($filter) {
    _.filter = _.select = _.wrap($filter('filter'), function(filter, obj, exp, comparator) {
      if(!(_.isArray(obj))) {
        obj = _.toArray(obj);
      }

      return filter(obj, exp, comparator);
    });

    _.reject = function(obj, exp) {
      // use angular built-in negated predicate
      if(_.isString(exp)) {
        return _.filter(obj, '!' + exp);
      }

      var diff = _.bind(_.difference, _, obj);

      return diff(_.filter(obj, exp));
    };
  }]);

  // end custom _


  // begin register angular-underscore/utils

  _.each(_.methods(_), function(methodName) {
    function register($rootScope) {$rootScope[methodName] = _.bind(_[methodName], _);}

    _.each([
      underscoreModule,
      utilsModule,
      ng.module('angular-underscore/utils/' + methodName, [])
      ], function(module) {
        module.run(['$rootScope', register]);
    });
  });

  // end register angular-underscore/utils


  // begin register angular-underscore/filters

  var
    adapList = [
      ['map', 'collect'],
      ['reduce', 'inject', 'foldl'],
      ['reduceRight', 'foldr'],
      ['find', 'detect'],
      ['filter', 'select'],
      'where',
      'findWhere',
      'reject',
      'invoke',
      'pluck',
      'max',
      'min',
      'sortBy',
      'groupBy',
      'indexBy',
      'countBy',
      'shuffle',
      'sample',
      'toArray',
      'size',
      ['first', 'head', 'take'],
      'initial',
      'last',
      ['rest', 'tail', 'drop'],
      'compact',
      'flatten',
      'without',
      'partition',
      'union',
      'intersection',
      'difference',
      ['uniq', 'unique'],
      'zip',
      'object',
      'indexOf',
      'lastIndexOf',
      'sortedIndex',
      'keys',
      'values',
      'pairs',
      'invert',
      ['functions', 'methods'],
      'pick',
      'omit',
      'tap',
      'identity',
      'uniqueId',
      'escape',
      'unescape',
      'result',
      'template'
    ];

  _.each(adapList, function(filterNames) {
    if(!(_.isArray(filterNames))) {
      filterNames = [filterNames];
    }

    var
      filter = _.bind(_[filterNames[0]], _),
      filterFactory = function() {return filter;};

    _.each(filterNames, function(filterName) {
      _.each([
        underscoreModule,
        filtersModule,
        ng.module('angular-underscore/filters/' + filterName, [])
        ], function(module) {
          module.filter(filterName, filterFactory);
      });
    });
  });

  // end register angular-underscore/filters

}(angular, _));

(function(angular) {
  'use strict';
  angular.module('app', [
    'app.config',
    'ngCookies',
    'ui.bootstrap',
    'ui.router',
    'ngSanitize',
    'ngResource',
    'ngAnimate',
    'ngMessages',
    'ngMap',
    'angular-loading-bar',
    'ngTouch',
    'angular-carousel',
    'ngMaterial',
    'duScroll',
    'angular-underscore',
  ])
    .value('duScrollDuration', 1000)
    .value('duScrollOffset', 100)
    .value('duScrollActiveClass', 'active-slide')
    // .value('duScrollEasing', invertedEasingFunction)
    .config(configure)
    .run(runBlock);

  configure.$inject = ['$urlRouterProvider', '$locationProvider', '$httpProvider'];

  function configure($urlRouterProvider, $locationProvider, $httpProvider) {
    $httpProvider.defaults.withCredentials = true;
    $locationProvider.html5Mode({enabled: true, requireBase: false});
    $urlRouterProvider.otherwise('/404');
  }

  runBlock.$inject = ['$rootScope','$state'];

  function runBlock($rootScope, $state) {
    // $rootScope.$on('close-modals', function () {
    //   $uibModalStack.dismissAll();
    // });
    $rootScope.canonical = '/';
    $rootScope.$state = $state;
    $rootScope.$on('$stateChangeError', function(error) {
      console.log(error);
    });
    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState) {
      $rootScope.pageTitle = toState.data && toState.data.title ? toState.data.title : 'test task';
      angular.element('body').scrollTop(0);
    });
    $rootScope.broadcastScrollEvent = function () {
      $rootScope.$broadcast('scroll');
    };
  }
})(angular);

(function (angular) {
  "use strict";
  angular.module('app').factory('HomeService', HomeService);

  HomeService.$inject = [];

  function HomeService() {



  return {

  };
}
})
(angular);

(function (angular) {
  "use strict";
  angular.module('app').factory('WindowEventsService', WindowEventsService);

  WindowEventsService.$inject = ['$window'];

  function WindowEventsService($window) {
    var api = {
      throttleTime: 100,
      listen: listen
    };

    //listener updates
    function listen(isOn, type, method, time) {

      //clean time, determine listener type
      var debounceTime = isNaN(time) ? api.throttleTime : time,
        listenerType = isOn ? 'addEventListener' : 'removeEventListener';

      //update throttled listener
      $window[listenerType](type, _.throttle(method, debounceTime));
    }

    //interface
    return api;
  }
})(angular);
angular.module('app').directive('onScroll', ["$timeout", function($timeout) {
  'use strict';

  return {
    scope: {
      onScroll: '&onScroll',
    },
    link: function(scope, element) {
      var scrollDelay = 250,
        scrollThrottleTimeout,
        throttled = false,
        scrollHandler = function() {
          if (!throttled) {
            scope.onScroll();
            throttled = true;
            scrollThrottleTimeout = $timeout(function(){
              throttled = false;
            }, scrollDelay);
          }
        };

      element.on("scroll", scrollHandler);

      scope.$on('$destroy', function() {
        element.off('scroll', scrollHandler);
      });
    }
  };
}]);

(function(angular) {
  'use strict';
  angular.module('app').controller('LandingController', LandingController);

  LandingController.$inject = ['$http', 'limitToFilter'];
  function LandingController($http, limitToFilter) {
    var main = this;

    main.formSubmit = formSubmit;
    main.error = 'something wrong';
    main.formData = {};
    main.showStep2 = false;
    main.showStep3 = false;

    main.minYears = 7671;
    main.dif70yers = 25569;
    main.todayDate = new Date();
    main.todayDays =  main.todayDate.getTime() / 86400000;
    main.ageCheck = ageCheck;
    main.ageInvalid = false;

    main.getCities = getCities;

    function ageCheck() {
      main.innStr = main.formData.inn.toString().substring(0, 5);
      main.ageCheckRes = main.todayDays + main.dif70yers - main.innStr;
      if (main.ageCheckRes >  main.minYears) {
        main.ageInvalid = false;
        return true;
      }   else {
        main.ageInvalid = true;
        return false;
      }
    }

    function formSubmit() {
      $http({
          url: '/',
          method: "POST",
          data: main.formData,
          headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;'}
          }).then(function successCallback(response) {
              alert('data sent');
          }, function errorCallback() {
              alert("something wrong");
            });
    }

    function getCities() {
      $http.get("http://gd.geobytes.com/AutoCompleteCity?callback=?&q=" + main.formData.city).then(function (response) {
        main.cities = limitToFilter(response.data, 15);
      });
    }
  }

})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingRoute);
  landingRoute.$inject = ['$stateProvider'];

  function landingRoute($stateProvider) {
    $stateProvider.state('landing', {
      abstract: true,
      templateUrl: '/view/modules/landing/landing.html',
      controller: 'LandingController',
      controllerAs: 'main'

    });
  }
})(angular);

(function (angular) {
  'use strict';
  angular.module('app').controller('LandingHomeController', LandingHomeController);


  LandingHomeController.$inject = ['$document', '$scope', '$window', 'WindowEventsService',
    'HomeService', '$stateParams', '$timeout'];
  function LandingHomeController($document, $scope, $window, WindowEventsService,
                                 HomeService, $stateParams, $timeout) {
    var vm = this;

    vm.scrollTo = scrollTo;


    function scrollTo(elementIndex) {
      $timeout(function () {
        $document.scrollToElementAnimated(vm.sections[elementIndex].element, 0);
      }, 100);
    }



  }

})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingHomeRoute);
  landingHomeRoute.$inject = ['$stateProvider'];

  function landingHomeRoute($stateProvider) {
    $stateProvider.state('landing.home', {
      url: '/',
      templateUrl: '/view/modules/landing/home/home.html',
      controller: 'LandingHomeController',
      controllerAs: 'vm',
      data: {
        title: 'test task'
      },
      params: {
        targetSectionName: 'main'
      }
    });
  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').controller('LandingPage2Controller', LandingPage2Controller);

  LandingPage2Controller.$inject = ['$document', 'WindowEventsService', '$window', '$scope', '$timeout',
  'HomeService', '$stateParams'];
  function LandingPage2Controller($document, WindowEventsService, $window, $scope, $timeout,
     HomeService, $stateParams) {
    var vm = this;

  

  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingPage2Route);
  landingPage2Route.$inject = ['$stateProvider'];

  function landingPage2Route($stateProvider) {
    $stateProvider.state('landing.page2', {
      url: '/page2',
      templateUrl: '/view/modules/landing/page2/page2.html',
      controller: 'LandingPage2Controller',
      controllerAs: 'vm',
      data: {
        title: 'page 2'
      }
    });
  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').controller('LandingPage3Controller', LandingPage3Controller);

  LandingPage3Controller.$inject = ['$document', 'WindowEventsService', '$window', '$scope', '$timeout', '$stateParams'];
  function LandingPage3Controller($document, WindowEventsService, $window, $scope, $timeout, $stateParams) {
    var vm = this;
    
  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingPage3Route);
  landingPage3Route.$inject = ['$stateProvider'];

  function landingPage3Route($stateProvider) {
    $stateProvider.state('landing.page3', {
      url: '/page3',
      templateUrl: '/view/modules/landing/page3/page3.html',
      controller: 'LandingPage3Controller',
      controllerAs: 'vm',
      data: {
        title: 'page 3'
      }
    });
  }
})(angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvY2FsLmpzIiwiYW5ndWxhci11bmRlcnNjb3JlLmpzIiwibWFpbi5qcyIsInNlcnZpY2VzL2hvbWUuc2VydmljZS5qcyIsInNlcnZpY2VzL3dpbmRvdy1ldmVudHMtc2VydmljZS5qcyIsImNvbXBvbmVudHMvZGlyZWN0aXZlcy9vbi1zY3JvbGwuanMiLCJtb2R1bGVzL2xhbmRpbmcvbGFuZGluZy5jdHJsLmpzIiwibW9kdWxlcy9sYW5kaW5nL2xhbmRpbmcucm91dGUuanMiLCJtb2R1bGVzL2xhbmRpbmcvaG9tZS9ob21lLmN0cmwuanMiLCJtb2R1bGVzL2xhbmRpbmcvaG9tZS9ob21lLnJvdXRlLmpzIiwibW9kdWxlcy9sYW5kaW5nL3BhZ2UyL3BhZ2UyLmN0cmwuanMiLCJtb2R1bGVzL2xhbmRpbmcvcGFnZTIvcGFnZTIucm91dGUuanMiLCJtb2R1bGVzL2xhbmRpbmcvcGFnZTMvcGFnZTMuY3RybC5qcyIsIm1vZHVsZXMvbGFuZGluZy9wYWdlMy9wYWdlMy5yb3V0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxRQUFBLE9BQUEsY0FBQTs7Q0FFQSxTQUFBLGVBQUE7Q0FDQSxPQUFBO0NBQ0EsT0FBQTtFQUNBLFFBQUE7O0NBRUEsd0JBQUE7Ozs7QUNQQSxDQUFBLFVBQUEsSUFBQSxHQUFBO0VBQ0E7O0VBRUE7SUFDQSxtQkFBQSxHQUFBLE9BQUEsc0JBQUE7SUFDQSxjQUFBLEdBQUEsT0FBQSw0QkFBQTtJQUNBLGdCQUFBLEdBQUEsT0FBQSw4QkFBQTs7OztFQUlBLFNBQUEsa0JBQUEsTUFBQTtJQUNBLE9BQUEsU0FBQSxLQUFBLENBQUEsT0FBQSxJQUFBOzs7RUFHQSxFQUFBLElBQUE7OztFQUdBLEVBQUEsS0FBQSxDQUFBLE9BQUEsT0FBQSxnQkFBQSxTQUFBLFFBQUE7SUFDQSxFQUFBLFVBQUEsRUFBQSxLQUFBLEVBQUEsU0FBQSxTQUFBLElBQUE7TUFDQSxJQUFBLE9BQUEsRUFBQSxRQUFBLFdBQUEsTUFBQTs7TUFFQSxHQUFBLEVBQUEsU0FBQSxLQUFBLEtBQUE7O1FBRUEsS0FBQSxLQUFBLGtCQUFBLEtBQUE7O1dBRUEsR0FBQSxFQUFBLFNBQUEsS0FBQSxLQUFBOztRQUVBLEtBQUEsS0FBQSxrQkFBQSxLQUFBOzs7TUFHQSxPQUFBLEdBQUEsTUFBQSxHQUFBOzs7Ozs7RUFNQSxHQUFBLFNBQUEsQ0FBQSxPQUFBLE9BQUEsQ0FBQSxXQUFBLFNBQUEsU0FBQTtJQUNBLEVBQUEsU0FBQSxFQUFBLFNBQUEsRUFBQSxLQUFBLFFBQUEsV0FBQSxTQUFBLFFBQUEsS0FBQSxLQUFBLFlBQUE7TUFDQSxHQUFBLEVBQUEsRUFBQSxRQUFBLE9BQUE7UUFDQSxNQUFBLEVBQUEsUUFBQTs7O01BR0EsT0FBQSxPQUFBLEtBQUEsS0FBQTs7O0lBR0EsRUFBQSxTQUFBLFNBQUEsS0FBQSxLQUFBOztNQUVBLEdBQUEsRUFBQSxTQUFBLE1BQUE7UUFDQSxPQUFBLEVBQUEsT0FBQSxLQUFBLE1BQUE7OztNQUdBLElBQUEsT0FBQSxFQUFBLEtBQUEsRUFBQSxZQUFBLEdBQUE7O01BRUEsT0FBQSxLQUFBLEVBQUEsT0FBQSxLQUFBOzs7Ozs7Ozs7RUFTQSxFQUFBLEtBQUEsRUFBQSxRQUFBLElBQUEsU0FBQSxZQUFBO0lBQ0EsU0FBQSxTQUFBLFlBQUEsQ0FBQSxXQUFBLGNBQUEsRUFBQSxLQUFBLEVBQUEsYUFBQTs7SUFFQSxFQUFBLEtBQUE7TUFDQTtNQUNBO01BQ0EsR0FBQSxPQUFBLDhCQUFBLFlBQUE7U0FDQSxTQUFBLFFBQUE7UUFDQSxPQUFBLElBQUEsQ0FBQSxjQUFBOzs7Ozs7Ozs7RUFTQTtJQUNBLFdBQUE7TUFDQSxDQUFBLE9BQUE7TUFDQSxDQUFBLFVBQUEsVUFBQTtNQUNBLENBQUEsZUFBQTtNQUNBLENBQUEsUUFBQTtNQUNBLENBQUEsVUFBQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBLENBQUEsU0FBQSxRQUFBO01BQ0E7TUFDQTtNQUNBLENBQUEsUUFBQSxRQUFBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQSxDQUFBLFFBQUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQSxDQUFBLGFBQUE7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7TUFDQTtNQUNBO01BQ0E7OztFQUdBLEVBQUEsS0FBQSxVQUFBLFNBQUEsYUFBQTtJQUNBLEdBQUEsRUFBQSxFQUFBLFFBQUEsZUFBQTtNQUNBLGNBQUEsQ0FBQTs7O0lBR0E7TUFDQSxTQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsS0FBQTtNQUNBLGdCQUFBLFdBQUEsQ0FBQSxPQUFBOztJQUVBLEVBQUEsS0FBQSxhQUFBLFNBQUEsWUFBQTtNQUNBLEVBQUEsS0FBQTtRQUNBO1FBQ0E7UUFDQSxHQUFBLE9BQUEsZ0NBQUEsWUFBQTtXQUNBLFNBQUEsUUFBQTtVQUNBLE9BQUEsT0FBQSxZQUFBOzs7Ozs7O0VBT0EsU0FBQTs7QUM1SkEsQ0FBQSxTQUFBLFNBQUE7RUFDQTtFQUNBLFFBQUEsT0FBQSxPQUFBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBOztLQUVBLE1BQUEsb0JBQUE7S0FDQSxNQUFBLGtCQUFBO0tBQ0EsTUFBQSx1QkFBQTs7S0FFQSxPQUFBO0tBQ0EsSUFBQTs7RUFFQSxVQUFBLFVBQUEsQ0FBQSxzQkFBQSxxQkFBQTs7RUFFQSxTQUFBLFVBQUEsb0JBQUEsbUJBQUEsZUFBQTtJQUNBLGNBQUEsU0FBQSxrQkFBQTtJQUNBLGtCQUFBLFVBQUEsQ0FBQSxTQUFBLE1BQUEsYUFBQTtJQUNBLG1CQUFBLFVBQUE7OztFQUdBLFNBQUEsVUFBQSxDQUFBLGFBQUE7O0VBRUEsU0FBQSxTQUFBLFlBQUEsUUFBQTs7OztJQUlBLFdBQUEsWUFBQTtJQUNBLFdBQUEsU0FBQTtJQUNBLFdBQUEsSUFBQSxxQkFBQSxTQUFBLE9BQUE7TUFDQSxRQUFBLElBQUE7O0lBRUEsV0FBQSxJQUFBLHVCQUFBLFNBQUEsT0FBQSxTQUFBLFVBQUEsV0FBQTtNQUNBLFdBQUEsWUFBQSxRQUFBLFFBQUEsUUFBQSxLQUFBLFFBQUEsUUFBQSxLQUFBLFFBQUE7TUFDQSxRQUFBLFFBQUEsUUFBQSxVQUFBOztJQUVBLFdBQUEsdUJBQUEsWUFBQTtNQUNBLFdBQUEsV0FBQTs7O0dBR0E7O0FDckRBLENBQUEsVUFBQSxTQUFBO0VBQ0E7RUFDQSxRQUFBLE9BQUEsT0FBQSxRQUFBLGVBQUE7O0VBRUEsWUFBQSxVQUFBOztFQUVBLFNBQUEsY0FBQTs7OztFQUlBLE9BQUE7Ozs7O0NBS0E7O0FDZkEsQ0FBQSxVQUFBLFNBQUE7RUFDQTtFQUNBLFFBQUEsT0FBQSxPQUFBLFFBQUEsdUJBQUE7O0VBRUEsb0JBQUEsVUFBQSxDQUFBOztFQUVBLFNBQUEsb0JBQUEsU0FBQTtJQUNBLElBQUEsTUFBQTtNQUNBLGNBQUE7TUFDQSxRQUFBOzs7O0lBSUEsU0FBQSxPQUFBLE1BQUEsTUFBQSxRQUFBLE1BQUE7OztNQUdBLElBQUEsZUFBQSxNQUFBLFFBQUEsSUFBQSxlQUFBO1FBQ0EsZUFBQSxPQUFBLHFCQUFBOzs7TUFHQSxRQUFBLGNBQUEsTUFBQSxFQUFBLFNBQUEsUUFBQTs7OztJQUlBLE9BQUE7O0dBRUE7QUMxQkEsUUFBQSxPQUFBLE9BQUEsVUFBQSx5QkFBQSxTQUFBLFVBQUE7RUFDQTs7RUFFQSxPQUFBO0lBQ0EsT0FBQTtNQUNBLFVBQUE7O0lBRUEsTUFBQSxTQUFBLE9BQUEsU0FBQTtNQUNBLElBQUEsY0FBQTtRQUNBO1FBQ0EsWUFBQTtRQUNBLGdCQUFBLFdBQUE7VUFDQSxJQUFBLENBQUEsV0FBQTtZQUNBLE1BQUE7WUFDQSxZQUFBO1lBQ0Esd0JBQUEsU0FBQSxVQUFBO2NBQ0EsWUFBQTtlQUNBOzs7O01BSUEsUUFBQSxHQUFBLFVBQUE7O01BRUEsTUFBQSxJQUFBLFlBQUEsV0FBQTtRQUNBLFFBQUEsSUFBQSxVQUFBOzs7Ozs7QUN4QkEsQ0FBQSxTQUFBLFNBQUE7RUFDQTtFQUNBLFFBQUEsT0FBQSxPQUFBLFdBQUEscUJBQUE7O0VBRUEsa0JBQUEsVUFBQSxDQUFBLFNBQUE7RUFDQSxTQUFBLGtCQUFBLE9BQUEsZUFBQTtJQUNBLElBQUEsT0FBQTs7SUFFQSxLQUFBLGFBQUE7SUFDQSxLQUFBLFFBQUE7SUFDQSxLQUFBLFdBQUE7SUFDQSxLQUFBLFlBQUE7SUFDQSxLQUFBLFlBQUE7O0lBRUEsS0FBQSxXQUFBO0lBQ0EsS0FBQSxZQUFBO0lBQ0EsS0FBQSxZQUFBLElBQUE7SUFDQSxLQUFBLGFBQUEsS0FBQSxVQUFBLFlBQUE7SUFDQSxLQUFBLFdBQUE7SUFDQSxLQUFBLGFBQUE7O0lBRUEsS0FBQSxZQUFBOztJQUVBLFNBQUEsV0FBQTtNQUNBLEtBQUEsU0FBQSxLQUFBLFNBQUEsSUFBQSxXQUFBLFVBQUEsR0FBQTtNQUNBLEtBQUEsY0FBQSxLQUFBLFlBQUEsS0FBQSxZQUFBLEtBQUE7TUFDQSxJQUFBLEtBQUEsZUFBQSxLQUFBLFVBQUE7UUFDQSxLQUFBLGFBQUE7UUFDQSxPQUFBO2VBQ0E7UUFDQSxLQUFBLGFBQUE7UUFDQSxPQUFBOzs7O0lBSUEsU0FBQSxhQUFBO01BQ0EsTUFBQTtVQUNBLEtBQUE7VUFDQSxRQUFBO1VBQ0EsTUFBQSxLQUFBO1VBQ0EsU0FBQSxDQUFBLGdCQUFBO2FBQ0EsS0FBQSxTQUFBLGdCQUFBLFVBQUE7Y0FDQSxNQUFBO2FBQ0EsU0FBQSxnQkFBQTtjQUNBLE1BQUE7Ozs7SUFJQSxTQUFBLFlBQUE7TUFDQSxNQUFBLElBQUEsMERBQUEsS0FBQSxTQUFBLE1BQUEsS0FBQSxVQUFBLFVBQUE7UUFDQSxLQUFBLFNBQUEsY0FBQSxTQUFBLE1BQUE7Ozs7O0dBS0E7O0FDdkRBLENBQUEsU0FBQSxTQUFBO0VBQ0E7RUFDQSxRQUFBLE9BQUEsT0FBQSxPQUFBO0VBQ0EsYUFBQSxVQUFBLENBQUE7O0VBRUEsU0FBQSxhQUFBLGdCQUFBO0lBQ0EsZUFBQSxNQUFBLFdBQUE7TUFDQSxVQUFBO01BQ0EsYUFBQTtNQUNBLFlBQUE7TUFDQSxjQUFBOzs7O0dBSUE7O0FDZEEsQ0FBQSxVQUFBLFNBQUE7RUFDQTtFQUNBLFFBQUEsT0FBQSxPQUFBLFdBQUEseUJBQUE7OztFQUdBLHNCQUFBLFVBQUEsQ0FBQSxhQUFBLFVBQUEsV0FBQTtJQUNBLGVBQUEsZ0JBQUE7RUFDQSxTQUFBLHNCQUFBLFdBQUEsUUFBQSxTQUFBO2lDQUNBLGFBQUEsY0FBQSxVQUFBO0lBQ0EsSUFBQSxLQUFBOztJQUVBLEdBQUEsV0FBQTs7O0lBR0EsU0FBQSxTQUFBLGNBQUE7TUFDQSxTQUFBLFlBQUE7UUFDQSxVQUFBLHdCQUFBLEdBQUEsU0FBQSxjQUFBLFNBQUE7U0FDQTs7Ozs7OztHQU9BOztBQ3hCQSxDQUFBLFNBQUEsU0FBQTtFQUNBO0VBQ0EsUUFBQSxPQUFBLE9BQUEsT0FBQTtFQUNBLGlCQUFBLFVBQUEsQ0FBQTs7RUFFQSxTQUFBLGlCQUFBLGdCQUFBO0lBQ0EsZUFBQSxNQUFBLGdCQUFBO01BQ0EsS0FBQTtNQUNBLGFBQUE7TUFDQSxZQUFBO01BQ0EsY0FBQTtNQUNBLE1BQUE7UUFDQSxPQUFBOztNQUVBLFFBQUE7UUFDQSxtQkFBQTs7OztHQUlBOztBQ25CQSxDQUFBLFNBQUEsU0FBQTtFQUNBO0VBQ0EsUUFBQSxPQUFBLE9BQUEsV0FBQSwwQkFBQTs7RUFFQSx1QkFBQSxVQUFBLENBQUEsYUFBQSx1QkFBQSxXQUFBLFVBQUE7RUFDQSxlQUFBO0VBQ0EsU0FBQSx1QkFBQSxXQUFBLHFCQUFBLFNBQUEsUUFBQTtLQUNBLGFBQUEsY0FBQTtJQUNBLElBQUEsS0FBQTs7Ozs7R0FLQTs7QUNiQSxDQUFBLFNBQUEsU0FBQTtFQUNBO0VBQ0EsUUFBQSxPQUFBLE9BQUEsT0FBQTtFQUNBLGtCQUFBLFVBQUEsQ0FBQTs7RUFFQSxTQUFBLGtCQUFBLGdCQUFBO0lBQ0EsZUFBQSxNQUFBLGlCQUFBO01BQ0EsS0FBQTtNQUNBLGFBQUE7TUFDQSxZQUFBO01BQ0EsY0FBQTtNQUNBLE1BQUE7UUFDQSxPQUFBOzs7O0dBSUE7O0FDaEJBLENBQUEsU0FBQSxTQUFBO0VBQ0E7RUFDQSxRQUFBLE9BQUEsT0FBQSxXQUFBLDBCQUFBOztFQUVBLHVCQUFBLFVBQUEsQ0FBQSxhQUFBLHVCQUFBLFdBQUEsVUFBQSxZQUFBO0VBQ0EsU0FBQSx1QkFBQSxXQUFBLHFCQUFBLFNBQUEsUUFBQSxVQUFBLGNBQUE7SUFDQSxJQUFBLEtBQUE7OztHQUdBOztBQ1RBLENBQUEsU0FBQSxTQUFBO0VBQ0E7RUFDQSxRQUFBLE9BQUEsT0FBQSxPQUFBO0VBQ0Esa0JBQUEsVUFBQSxDQUFBOztFQUVBLFNBQUEsa0JBQUEsZ0JBQUE7SUFDQSxlQUFBLE1BQUEsaUJBQUE7TUFDQSxLQUFBO01BQ0EsYUFBQTtNQUNBLFlBQUE7TUFDQSxjQUFBO01BQ0EsTUFBQTtRQUNBLE9BQUE7Ozs7R0FJQTtBQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyLm1vZHVsZShcImFwcC5jb25maWdcIiwgW10pXG5cbi5jb25zdGFudChcImFwcFNldHRpbmdzXCIsIHtcblx0XCJERVZcIjogdHJ1ZSxcblx0XCJBUElcIjoge1xuXHRcdFwiSE9TVFwiOiBcIlwiXG5cdH0sXG5cdFwiV1VMSUFOX09FTV9JRF9MRU5HVEhcIjogMTJcbn0pXG5cbjsiLCIoZnVuY3Rpb24gKG5nLCBfKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXJcclxuICAgIHVuZGVyc2NvcmVNb2R1bGUgPSBuZy5tb2R1bGUoJ2FuZ3VsYXItdW5kZXJzY29yZScsIFtdKSxcclxuICAgIHV0aWxzTW9kdWxlID0gbmcubW9kdWxlKCdhbmd1bGFyLXVuZGVyc2NvcmUvdXRpbHMnLCBbXSksXHJcbiAgICBmaWx0ZXJzTW9kdWxlID0gbmcubW9kdWxlKCdhbmd1bGFyLXVuZGVyc2NvcmUvZmlsdGVycycsIFtdKTtcclxuXHJcbiAgLy8gYmVnaW4gY3VzdG9tIF9cclxuXHJcbiAgZnVuY3Rpb24gcHJvcEdldHRlckZhY3RvcnkocHJvcCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge3JldHVybiBvYmpbcHJvcF07fTtcclxuICB9XHJcblxyXG4gIF8uXyA9IF87XHJcblxyXG4gIC8vIFNoaXYgXCJtaW5cIiwgXCJtYXhcIiAsXCJzb3J0ZWRJbmRleFwiIHRvIGFjY2VwdCBwcm9wZXJ0eSBwcmVkaWNhdGUuXHJcbiAgXy5lYWNoKFsnbWluJywgJ21heCcsICdzb3J0ZWRJbmRleCddLCBmdW5jdGlvbihmbk5hbWUpIHtcclxuICAgIF9bZm5OYW1lXSA9IF8ud3JhcChfW2ZuTmFtZV0sIGZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgIHZhciBhcmdzID0gXy50b0FycmF5KGFyZ3VtZW50cykuc2xpY2UoMSk7XHJcblxyXG4gICAgICBpZihfLmlzU3RyaW5nKGFyZ3NbMl0pKSB7XHJcbiAgICAgICAgLy8gZm9yIFwic29ydGVkSW5kZXhcIiwgdHJhbnNtdXRpbmcgc3RyIHRvIHByb3BlcnR5IGdldHRlclxyXG4gICAgICAgIGFyZ3NbMl0gPSBwcm9wR2V0dGVyRmFjdG9yeShhcmdzWzJdKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKF8uaXNTdHJpbmcoYXJnc1sxXSkpIHtcclxuICAgICAgICAvLyBmb3IgXCJtaW5cIiBvciBcIm1heFwiLCB0cmFuc211dGluZyBzdHIgdG8gcHJvcGVydHkgZ2V0dGVyXHJcbiAgICAgICAgYXJnc1sxXSA9IHByb3BHZXR0ZXJGYWN0b3J5KGFyZ3NbMV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZm4uYXBwbHkoXywgYXJncyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgLy8gU2hpdiBcImZpbHRlclwiLCBcInJlamVjdFwiIHRvIGFuZ3VsYXIncyBidWlsdC1pbixcclxuICAvLyBhbmQgcmVzZXJ2ZSB1bmRlcnNjb3JlJ3MgZmVhdHVyZSh3b3JrcyBvbiBvYmopLlxyXG4gIG5nLmluamVjdG9yKFsnbmcnXSkuaW52b2tlKFsnJGZpbHRlcicsIGZ1bmN0aW9uKCRmaWx0ZXIpIHtcclxuICAgIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBfLndyYXAoJGZpbHRlcignZmlsdGVyJyksIGZ1bmN0aW9uKGZpbHRlciwgb2JqLCBleHAsIGNvbXBhcmF0b3IpIHtcclxuICAgICAgaWYoIShfLmlzQXJyYXkob2JqKSkpIHtcclxuICAgICAgICBvYmogPSBfLnRvQXJyYXkob2JqKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZpbHRlcihvYmosIGV4cCwgY29tcGFyYXRvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgZXhwKSB7XHJcbiAgICAgIC8vIHVzZSBhbmd1bGFyIGJ1aWx0LWluIG5lZ2F0ZWQgcHJlZGljYXRlXHJcbiAgICAgIGlmKF8uaXNTdHJpbmcoZXhwKSkge1xyXG4gICAgICAgIHJldHVybiBfLmZpbHRlcihvYmosICchJyArIGV4cCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkaWZmID0gXy5iaW5kKF8uZGlmZmVyZW5jZSwgXywgb2JqKTtcclxuXHJcbiAgICAgIHJldHVybiBkaWZmKF8uZmlsdGVyKG9iaiwgZXhwKSk7XHJcbiAgICB9O1xyXG4gIH1dKTtcclxuXHJcbiAgLy8gZW5kIGN1c3RvbSBfXHJcblxyXG5cclxuICAvLyBiZWdpbiByZWdpc3RlciBhbmd1bGFyLXVuZGVyc2NvcmUvdXRpbHNcclxuXHJcbiAgXy5lYWNoKF8ubWV0aG9kcyhfKSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIoJHJvb3RTY29wZSkgeyRyb290U2NvcGVbbWV0aG9kTmFtZV0gPSBfLmJpbmQoX1ttZXRob2ROYW1lXSwgXyk7fVxyXG5cclxuICAgIF8uZWFjaChbXHJcbiAgICAgIHVuZGVyc2NvcmVNb2R1bGUsXHJcbiAgICAgIHV0aWxzTW9kdWxlLFxyXG4gICAgICBuZy5tb2R1bGUoJ2FuZ3VsYXItdW5kZXJzY29yZS91dGlscy8nICsgbWV0aG9kTmFtZSwgW10pXHJcbiAgICAgIF0sIGZ1bmN0aW9uKG1vZHVsZSkge1xyXG4gICAgICAgIG1vZHVsZS5ydW4oWyckcm9vdFNjb3BlJywgcmVnaXN0ZXJdKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBlbmQgcmVnaXN0ZXIgYW5ndWxhci11bmRlcnNjb3JlL3V0aWxzXHJcblxyXG5cclxuICAvLyBiZWdpbiByZWdpc3RlciBhbmd1bGFyLXVuZGVyc2NvcmUvZmlsdGVyc1xyXG5cclxuICB2YXJcclxuICAgIGFkYXBMaXN0ID0gW1xyXG4gICAgICBbJ21hcCcsICdjb2xsZWN0J10sXHJcbiAgICAgIFsncmVkdWNlJywgJ2luamVjdCcsICdmb2xkbCddLFxyXG4gICAgICBbJ3JlZHVjZVJpZ2h0JywgJ2ZvbGRyJ10sXHJcbiAgICAgIFsnZmluZCcsICdkZXRlY3QnXSxcclxuICAgICAgWydmaWx0ZXInLCAnc2VsZWN0J10sXHJcbiAgICAgICd3aGVyZScsXHJcbiAgICAgICdmaW5kV2hlcmUnLFxyXG4gICAgICAncmVqZWN0JyxcclxuICAgICAgJ2ludm9rZScsXHJcbiAgICAgICdwbHVjaycsXHJcbiAgICAgICdtYXgnLFxyXG4gICAgICAnbWluJyxcclxuICAgICAgJ3NvcnRCeScsXHJcbiAgICAgICdncm91cEJ5JyxcclxuICAgICAgJ2luZGV4QnknLFxyXG4gICAgICAnY291bnRCeScsXHJcbiAgICAgICdzaHVmZmxlJyxcclxuICAgICAgJ3NhbXBsZScsXHJcbiAgICAgICd0b0FycmF5JyxcclxuICAgICAgJ3NpemUnLFxyXG4gICAgICBbJ2ZpcnN0JywgJ2hlYWQnLCAndGFrZSddLFxyXG4gICAgICAnaW5pdGlhbCcsXHJcbiAgICAgICdsYXN0JyxcclxuICAgICAgWydyZXN0JywgJ3RhaWwnLCAnZHJvcCddLFxyXG4gICAgICAnY29tcGFjdCcsXHJcbiAgICAgICdmbGF0dGVuJyxcclxuICAgICAgJ3dpdGhvdXQnLFxyXG4gICAgICAncGFydGl0aW9uJyxcclxuICAgICAgJ3VuaW9uJyxcclxuICAgICAgJ2ludGVyc2VjdGlvbicsXHJcbiAgICAgICdkaWZmZXJlbmNlJyxcclxuICAgICAgWyd1bmlxJywgJ3VuaXF1ZSddLFxyXG4gICAgICAnemlwJyxcclxuICAgICAgJ29iamVjdCcsXHJcbiAgICAgICdpbmRleE9mJyxcclxuICAgICAgJ2xhc3RJbmRleE9mJyxcclxuICAgICAgJ3NvcnRlZEluZGV4JyxcclxuICAgICAgJ2tleXMnLFxyXG4gICAgICAndmFsdWVzJyxcclxuICAgICAgJ3BhaXJzJyxcclxuICAgICAgJ2ludmVydCcsXHJcbiAgICAgIFsnZnVuY3Rpb25zJywgJ21ldGhvZHMnXSxcclxuICAgICAgJ3BpY2snLFxyXG4gICAgICAnb21pdCcsXHJcbiAgICAgICd0YXAnLFxyXG4gICAgICAnaWRlbnRpdHknLFxyXG4gICAgICAndW5pcXVlSWQnLFxyXG4gICAgICAnZXNjYXBlJyxcclxuICAgICAgJ3VuZXNjYXBlJyxcclxuICAgICAgJ3Jlc3VsdCcsXHJcbiAgICAgICd0ZW1wbGF0ZSdcclxuICAgIF07XHJcblxyXG4gIF8uZWFjaChhZGFwTGlzdCwgZnVuY3Rpb24oZmlsdGVyTmFtZXMpIHtcclxuICAgIGlmKCEoXy5pc0FycmF5KGZpbHRlck5hbWVzKSkpIHtcclxuICAgICAgZmlsdGVyTmFtZXMgPSBbZmlsdGVyTmFtZXNdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhclxyXG4gICAgICBmaWx0ZXIgPSBfLmJpbmQoX1tmaWx0ZXJOYW1lc1swXV0sIF8pLFxyXG4gICAgICBmaWx0ZXJGYWN0b3J5ID0gZnVuY3Rpb24oKSB7cmV0dXJuIGZpbHRlcjt9O1xyXG5cclxuICAgIF8uZWFjaChmaWx0ZXJOYW1lcywgZnVuY3Rpb24oZmlsdGVyTmFtZSkge1xyXG4gICAgICBfLmVhY2goW1xyXG4gICAgICAgIHVuZGVyc2NvcmVNb2R1bGUsXHJcbiAgICAgICAgZmlsdGVyc01vZHVsZSxcclxuICAgICAgICBuZy5tb2R1bGUoJ2FuZ3VsYXItdW5kZXJzY29yZS9maWx0ZXJzLycgKyBmaWx0ZXJOYW1lLCBbXSlcclxuICAgICAgICBdLCBmdW5jdGlvbihtb2R1bGUpIHtcclxuICAgICAgICAgIG1vZHVsZS5maWx0ZXIoZmlsdGVyTmFtZSwgZmlsdGVyRmFjdG9yeSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIGVuZCByZWdpc3RlciBhbmd1bGFyLXVuZGVyc2NvcmUvZmlsdGVyc1xyXG5cclxufShhbmd1bGFyLCBfKSk7XHJcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAnYXBwLmNvbmZpZycsXHJcbiAgICAnbmdDb29raWVzJyxcclxuICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdTYW5pdGl6ZScsXHJcbiAgICAnbmdSZXNvdXJjZScsXHJcbiAgICAnbmdBbmltYXRlJyxcclxuICAgICduZ01lc3NhZ2VzJyxcclxuICAgICduZ01hcCcsXHJcbiAgICAnYW5ndWxhci1sb2FkaW5nLWJhcicsXHJcbiAgICAnbmdUb3VjaCcsXHJcbiAgICAnYW5ndWxhci1jYXJvdXNlbCcsXHJcbiAgICAnbmdNYXRlcmlhbCcsXHJcbiAgICAnZHVTY3JvbGwnLFxyXG4gICAgJ2FuZ3VsYXItdW5kZXJzY29yZScsXHJcbiAgXSlcclxuICAgIC52YWx1ZSgnZHVTY3JvbGxEdXJhdGlvbicsIDEwMDApXHJcbiAgICAudmFsdWUoJ2R1U2Nyb2xsT2Zmc2V0JywgMTAwKVxyXG4gICAgLnZhbHVlKCdkdVNjcm9sbEFjdGl2ZUNsYXNzJywgJ2FjdGl2ZS1zbGlkZScpXHJcbiAgICAvLyAudmFsdWUoJ2R1U2Nyb2xsRWFzaW5nJywgaW52ZXJ0ZWRFYXNpbmdGdW5jdGlvbilcclxuICAgIC5jb25maWcoY29uZmlndXJlKVxyXG4gICAgLnJ1bihydW5CbG9jayk7XHJcblxyXG4gIGNvbmZpZ3VyZS4kaW5qZWN0ID0gWyckdXJsUm91dGVyUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlciddO1xyXG5cclxuICBmdW5jdGlvbiBjb25maWd1cmUoJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJGh0dHBQcm92aWRlcikge1xyXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtlbmFibGVkOiB0cnVlLCByZXF1aXJlQmFzZTogZmFsc2V9KTtcclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy80MDQnKTtcclxuICB9XHJcblxyXG4gIHJ1bkJsb2NrLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCckc3RhdGUnXTtcclxuXHJcbiAgZnVuY3Rpb24gcnVuQmxvY2soJHJvb3RTY29wZSwgJHN0YXRlKSB7XHJcbiAgICAvLyAkcm9vdFNjb3BlLiRvbignY2xvc2UtbW9kYWxzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gICAkdWliTW9kYWxTdGFjay5kaXNtaXNzQWxsKCk7XHJcbiAgICAvLyB9KTtcclxuICAgICRyb290U2NvcGUuY2Fub25pY2FsID0gJy8nO1xyXG4gICAgJHJvb3RTY29wZS4kc3RhdGUgPSAkc3RhdGU7XHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICB9KTtcclxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUpIHtcclxuICAgICAgJHJvb3RTY29wZS5wYWdlVGl0bGUgPSB0b1N0YXRlLmRhdGEgJiYgdG9TdGF0ZS5kYXRhLnRpdGxlID8gdG9TdGF0ZS5kYXRhLnRpdGxlIDogJ3Rlc3QgdGFzayc7XHJcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgnYm9keScpLnNjcm9sbFRvcCgwKTtcclxuICAgIH0pO1xyXG4gICAgJHJvb3RTY29wZS5icm9hZGNhc3RTY3JvbGxFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwnKTtcclxuICAgIH07XHJcbiAgfVxyXG59KShhbmd1bGFyKTtcclxuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ0hvbWVTZXJ2aWNlJywgSG9tZVNlcnZpY2UpO1xyXG5cclxuICBIb21lU2VydmljZS4kaW5qZWN0ID0gW107XHJcblxyXG4gIGZ1bmN0aW9uIEhvbWVTZXJ2aWNlKCkge1xyXG5cclxuXHJcblxyXG4gIHJldHVybiB7XHJcblxyXG4gIH07XHJcbn1cclxufSlcclxuKGFuZ3VsYXIpO1xyXG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnV2luZG93RXZlbnRzU2VydmljZScsIFdpbmRvd0V2ZW50c1NlcnZpY2UpO1xyXG5cclxuICBXaW5kb3dFdmVudHNTZXJ2aWNlLiRpbmplY3QgPSBbJyR3aW5kb3cnXTtcclxuXHJcbiAgZnVuY3Rpb24gV2luZG93RXZlbnRzU2VydmljZSgkd2luZG93KSB7XHJcbiAgICB2YXIgYXBpID0ge1xyXG4gICAgICB0aHJvdHRsZVRpbWU6IDEwMCxcclxuICAgICAgbGlzdGVuOiBsaXN0ZW5cclxuICAgIH07XHJcblxyXG4gICAgLy9saXN0ZW5lciB1cGRhdGVzXHJcbiAgICBmdW5jdGlvbiBsaXN0ZW4oaXNPbiwgdHlwZSwgbWV0aG9kLCB0aW1lKSB7XHJcblxyXG4gICAgICAvL2NsZWFuIHRpbWUsIGRldGVybWluZSBsaXN0ZW5lciB0eXBlXHJcbiAgICAgIHZhciBkZWJvdW5jZVRpbWUgPSBpc05hTih0aW1lKSA/IGFwaS50aHJvdHRsZVRpbWUgOiB0aW1lLFxyXG4gICAgICAgIGxpc3RlbmVyVHlwZSA9IGlzT24gPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XHJcblxyXG4gICAgICAvL3VwZGF0ZSB0aHJvdHRsZWQgbGlzdGVuZXJcclxuICAgICAgJHdpbmRvd1tsaXN0ZW5lclR5cGVdKHR5cGUsIF8udGhyb3R0bGUobWV0aG9kLCBkZWJvdW5jZVRpbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2ludGVyZmFjZVxyXG4gICAgcmV0dXJuIGFwaTtcclxuICB9XHJcbn0pKGFuZ3VsYXIpOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5kaXJlY3RpdmUoJ29uU2Nyb2xsJywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBvblNjcm9sbDogJyZvblNjcm9sbCcsXHJcbiAgICB9LFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgdmFyIHNjcm9sbERlbGF5ID0gMjUwLFxyXG4gICAgICAgIHNjcm9sbFRocm90dGxlVGltZW91dCxcclxuICAgICAgICB0aHJvdHRsZWQgPSBmYWxzZSxcclxuICAgICAgICBzY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoIXRocm90dGxlZCkge1xyXG4gICAgICAgICAgICBzY29wZS5vblNjcm9sbCgpO1xyXG4gICAgICAgICAgICB0aHJvdHRsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzY3JvbGxUaHJvdHRsZVRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgIHRocm90dGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LCBzY3JvbGxEZWxheSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGVsZW1lbnQub24oXCJzY3JvbGxcIiwgc2Nyb2xsSGFuZGxlcik7XHJcblxyXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZWxlbWVudC5vZmYoJ3Njcm9sbCcsIHNjcm9sbEhhbmRsZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0xhbmRpbmdDb250cm9sbGVyJywgTGFuZGluZ0NvbnRyb2xsZXIpO1xyXG5cclxuICBMYW5kaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckaHR0cCcsICdsaW1pdFRvRmlsdGVyJ107XHJcbiAgZnVuY3Rpb24gTGFuZGluZ0NvbnRyb2xsZXIoJGh0dHAsIGxpbWl0VG9GaWx0ZXIpIHtcclxuICAgIHZhciBtYWluID0gdGhpcztcclxuXHJcbiAgICBtYWluLmZvcm1TdWJtaXQgPSBmb3JtU3VibWl0O1xyXG4gICAgbWFpbi5lcnJvciA9ICdzb21ldGhpbmcgd3JvbmcnO1xyXG4gICAgbWFpbi5mb3JtRGF0YSA9IHt9O1xyXG4gICAgbWFpbi5zaG93U3RlcDIgPSBmYWxzZTtcclxuICAgIG1haW4uc2hvd1N0ZXAzID0gZmFsc2U7XHJcblxyXG4gICAgbWFpbi5taW5ZZWFycyA9IDc2NzE7XHJcbiAgICBtYWluLmRpZjcweWVycyA9IDI1NTY5O1xyXG4gICAgbWFpbi50b2RheURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgbWFpbi50b2RheURheXMgPSAgbWFpbi50b2RheURhdGUuZ2V0VGltZSgpIC8gODY0MDAwMDA7XHJcbiAgICBtYWluLmFnZUNoZWNrID0gYWdlQ2hlY2s7XHJcbiAgICBtYWluLmFnZUludmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICBtYWluLmdldENpdGllcyA9IGdldENpdGllcztcclxuXHJcbiAgICBmdW5jdGlvbiBhZ2VDaGVjaygpIHtcclxuICAgICAgbWFpbi5pbm5TdHIgPSBtYWluLmZvcm1EYXRhLmlubi50b1N0cmluZygpLnN1YnN0cmluZygwLCA1KTtcclxuICAgICAgbWFpbi5hZ2VDaGVja1JlcyA9IG1haW4udG9kYXlEYXlzICsgbWFpbi5kaWY3MHllcnMgLSBtYWluLmlublN0cjtcclxuICAgICAgaWYgKG1haW4uYWdlQ2hlY2tSZXMgPiAgbWFpbi5taW5ZZWFycykge1xyXG4gICAgICAgIG1haW4uYWdlSW52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9ICAgZWxzZSB7XHJcbiAgICAgICAgbWFpbi5hZ2VJbnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JtU3VibWl0KCkge1xyXG4gICAgICAkaHR0cCh7XHJcbiAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICBkYXRhOiBtYWluLmZvcm1EYXRhLFxyXG4gICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTg7J31cclxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgYWxlcnQoJ2RhdGEgc2VudCcpO1xyXG4gICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjaygpIHtcclxuICAgICAgICAgICAgICBhbGVydChcInNvbWV0aGluZyB3cm9uZ1wiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2l0aWVzKCkge1xyXG4gICAgICAkaHR0cC5nZXQoXCJodHRwOi8vZ2QuZ2VvYnl0ZXMuY29tL0F1dG9Db21wbGV0ZUNpdHk/Y2FsbGJhY2s9PyZxPVwiICsgbWFpbi5mb3JtRGF0YS5jaXR5KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIG1haW4uY2l0aWVzID0gbGltaXRUb0ZpbHRlcihyZXNwb25zZS5kYXRhLCAxNSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKGFuZ3VsYXIpO1xyXG4iLCIoZnVuY3Rpb24oYW5ndWxhcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGxhbmRpbmdSb3V0ZSk7XHJcbiAgbGFuZGluZ1JvdXRlLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJ107XHJcblxyXG4gIGZ1bmN0aW9uIGxhbmRpbmdSb3V0ZSgkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xhbmRpbmcnLCB7XHJcbiAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy92aWV3L21vZHVsZXMvbGFuZGluZy9sYW5kaW5nLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnTGFuZGluZ0NvbnRyb2xsZXInLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICdtYWluJ1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxufSkoYW5ndWxhcik7XHJcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignTGFuZGluZ0hvbWVDb250cm9sbGVyJywgTGFuZGluZ0hvbWVDb250cm9sbGVyKTtcclxuXHJcblxyXG4gIExhbmRpbmdIb21lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZG9jdW1lbnQnLCAnJHNjb3BlJywgJyR3aW5kb3cnLCAnV2luZG93RXZlbnRzU2VydmljZScsXHJcbiAgICAnSG9tZVNlcnZpY2UnLCAnJHN0YXRlUGFyYW1zJywgJyR0aW1lb3V0J107XHJcbiAgZnVuY3Rpb24gTGFuZGluZ0hvbWVDb250cm9sbGVyKCRkb2N1bWVudCwgJHNjb3BlLCAkd2luZG93LCBXaW5kb3dFdmVudHNTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb21lU2VydmljZSwgJHN0YXRlUGFyYW1zLCAkdGltZW91dCkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS5zY3JvbGxUbyA9IHNjcm9sbFRvO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtZW50SW5kZXgpIHtcclxuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRkb2N1bWVudC5zY3JvbGxUb0VsZW1lbnRBbmltYXRlZCh2bS5zZWN0aW9uc1tlbGVtZW50SW5kZXhdLmVsZW1lbnQsIDApO1xyXG4gICAgICB9LCAxMDApO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gIH1cclxuXHJcbn0pKGFuZ3VsYXIpO1xyXG4iLCIoZnVuY3Rpb24oYW5ndWxhcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGxhbmRpbmdIb21lUm91dGUpO1xyXG4gIGxhbmRpbmdIb21lUm91dGUuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInXTtcclxuXHJcbiAgZnVuY3Rpb24gbGFuZGluZ0hvbWVSb3V0ZSgkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xhbmRpbmcuaG9tZScsIHtcclxuICAgICAgdXJsOiAnLycsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXcvbW9kdWxlcy9sYW5kaW5nL2hvbWUvaG9tZS5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0xhbmRpbmdIb21lQ29udHJvbGxlcicsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRpdGxlOiAndGVzdCB0YXNrJ1xyXG4gICAgICB9LFxyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICB0YXJnZXRTZWN0aW9uTmFtZTogJ21haW4nXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufSkoYW5ndWxhcik7XHJcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdMYW5kaW5nUGFnZTJDb250cm9sbGVyJywgTGFuZGluZ1BhZ2UyQ29udHJvbGxlcik7XHJcblxyXG4gIExhbmRpbmdQYWdlMkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJGRvY3VtZW50JywgJ1dpbmRvd0V2ZW50c1NlcnZpY2UnLCAnJHdpbmRvdycsICckc2NvcGUnLCAnJHRpbWVvdXQnLFxyXG4gICdIb21lU2VydmljZScsICckc3RhdGVQYXJhbXMnXTtcclxuICBmdW5jdGlvbiBMYW5kaW5nUGFnZTJDb250cm9sbGVyKCRkb2N1bWVudCwgV2luZG93RXZlbnRzU2VydmljZSwgJHdpbmRvdywgJHNjb3BlLCAkdGltZW91dCxcclxuICAgICBIb21lU2VydmljZSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICBcclxuXHJcbiAgfVxyXG59KShhbmd1bGFyKTtcclxuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhsYW5kaW5nUGFnZTJSb3V0ZSk7XHJcbiAgbGFuZGluZ1BhZ2UyUm91dGUuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInXTtcclxuXHJcbiAgZnVuY3Rpb24gbGFuZGluZ1BhZ2UyUm91dGUoJHN0YXRlUHJvdmlkZXIpIHtcclxuICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdsYW5kaW5nLnBhZ2UyJywge1xyXG4gICAgICB1cmw6ICcvcGFnZTInLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy92aWV3L21vZHVsZXMvbGFuZGluZy9wYWdlMi9wYWdlMi5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0xhbmRpbmdQYWdlMkNvbnRyb2xsZXInLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICB0aXRsZTogJ3BhZ2UgMidcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59KShhbmd1bGFyKTtcclxuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0xhbmRpbmdQYWdlM0NvbnRyb2xsZXInLCBMYW5kaW5nUGFnZTNDb250cm9sbGVyKTtcclxuXHJcbiAgTGFuZGluZ1BhZ2UzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZG9jdW1lbnQnLCAnV2luZG93RXZlbnRzU2VydmljZScsICckd2luZG93JywgJyRzY29wZScsICckdGltZW91dCcsICckc3RhdGVQYXJhbXMnXTtcclxuICBmdW5jdGlvbiBMYW5kaW5nUGFnZTNDb250cm9sbGVyKCRkb2N1bWVudCwgV2luZG93RXZlbnRzU2VydmljZSwgJHdpbmRvdywgJHNjb3BlLCAkdGltZW91dCwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgXHJcbiAgfVxyXG59KShhbmd1bGFyKTtcclxuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbmZpZyhsYW5kaW5nUGFnZTNSb3V0ZSk7XHJcbiAgbGFuZGluZ1BhZ2UzUm91dGUuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInXTtcclxuXHJcbiAgZnVuY3Rpb24gbGFuZGluZ1BhZ2UzUm91dGUoJHN0YXRlUHJvdmlkZXIpIHtcclxuICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdsYW5kaW5nLnBhZ2UzJywge1xyXG4gICAgICB1cmw6ICcvcGFnZTMnLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy92aWV3L21vZHVsZXMvbGFuZGluZy9wYWdlMy9wYWdlMy5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0xhbmRpbmdQYWdlM0NvbnRyb2xsZXInLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgIGRhdGE6IHtcclxuICAgICAgICB0aXRsZTogJ3BhZ2UgMydcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG59KShhbmd1bGFyKTtcclxuIl19
