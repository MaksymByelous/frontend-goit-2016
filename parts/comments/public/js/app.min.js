angular.module("app.config",[]).constant("appSettings",{DEV:!1,API:{HOST:""},WULIAN_OEM_ID_LENGTH:12}),function(t,e){"use strict";function n(t){return function(e){return e[t]}}var o=t.module("angular-underscore",[]),i=t.module("angular-underscore/utils",[]),r=t.module("angular-underscore/filters",[]);e._=e,e.each(["min","max","sortedIndex"],function(t){e[t]=e.wrap(e[t],function(t){var o=e.toArray(arguments).slice(1);return e.isString(o[2])?o[2]=n(o[2]):e.isString(o[1])&&(o[1]=n(o[1])),t.apply(e,o)})}),t.injector(["ng"]).invoke(["$filter",function(t){e.filter=e.select=e.wrap(t("filter"),function(t,n,o,i){return e.isArray(n)||(n=e.toArray(n)),t(n,o,i)}),e.reject=function(t,n){if(e.isString(n))return e.filter(t,"!"+n);var o=e.bind(e.difference,e,t);return o(e.filter(t,n))}}]),e.each(e.methods(e),function(n){function r(t){t[n]=e.bind(e[n],e)}e.each([o,i,t.module("angular-underscore/utils/"+n,[])],function(t){t.run(["$rootScope",r])})});var a=[["map","collect"],["reduce","inject","foldl"],["reduceRight","foldr"],["find","detect"],["filter","select"],"where","findWhere","reject","invoke","pluck","max","min","sortBy","groupBy","indexBy","countBy","shuffle","sample","toArray","size",["first","head","take"],"initial","last",["rest","tail","drop"],"compact","flatten","without","partition","union","intersection","difference",["uniq","unique"],"zip","object","indexOf","lastIndexOf","sortedIndex","keys","values","pairs","invert",["functions","methods"],"pick","omit","tap","identity","uniqueId","escape","unescape","result","template"];e.each(a,function(n){e.isArray(n)||(n=[n]);var i=e.bind(e[n[0]],e),a=function(){return i};e.each(n,function(n){e.each([o,r,t.module("angular-underscore/filters/"+n,[])],function(t){t.filter(n,a)})})})}(angular,_),function(t){"use strict";function e(t,e,n){n.defaults.withCredentials=!0,e.html5Mode({enabled:!0,requireBase:!1}),t.otherwise("/404")}function n(e,n){e.canonical="/",e.$state=n,e.$on("$stateChangeError",function(t){console.log(t)}),e.$on("$stateChangeSuccess",function(n,o,i,r){e.pageTitle=o.data&&o.data.title?o.data.title:"test task",t.element("body").scrollTop(0)}),e.broadcastScrollEvent=function(){e.$broadcast("scroll")}}t.module("app",["app.config","ngCookies","ui.bootstrap","ui.router","ngSanitize","ngResource","ngAnimate","ngMessages","ngMap","angular-loading-bar","ngTouch","angular-carousel","ngMaterial","duScroll","angular-underscore","angularLocalStorage"]).value("duScrollDuration",1e3).value("duScrollOffset",100).value("duScrollActiveClass","active-slide").config(e).run(n),e.$inject=["$urlRouterProvider","$locationProvider","$httpProvider"],n.$inject=["$rootScope","$state"]}(angular),function(t){"use strict";function e(){return{}}t.module("app").factory("HomeService",e),e.$inject=[]}(angular),function(t){"use strict";function e(t){function e(e,o,i,r){var a=isNaN(r)?n.throttleTime:r,c=e?"addEventListener":"removeEventListener";t[c](o,_.throttle(i,a))}var n={throttleTime:100,listen:e};return n}t.module("app").factory("WindowEventsService",e),e.$inject=["$window"]}(angular),angular.module("app").directive("onScroll",["$timeout",function(t){"use strict";return{scope:{onScroll:"&onScroll"},link:function(e,n){var o,i=250,r=!1,a=function(){r||(e.onScroll(),r=!0,o=t(function(){r=!1},i))};n.on("scroll",a),e.$on("$destroy",function(){n.off("scroll",a)})}}}]),function(t){"use strict";function e(t,e){function n(){return r.innStr=r.formData.inn.toString().substring(0,5),r.ageCheckRes=r.todayDays+r.dif70yers-r.innStr,r.ageCheckRes>r.minYears?(r.ageInvalid=!1,!0):(r.ageInvalid=!0,!1)}function o(){t({url:"/",method:"POST",data:r.formData,headers:{"Content-Type":"application/x-www-form-urlencoded;charset=utf-8;"}}).then(function(t){alert("data sent")},function(){alert("something wrong")})}function i(){t.get("http://gd.geobytes.com/AutoCompleteCity?callback=?&q="+r.formData.city).then(function(t){r.cities=e(t.data,15)})}var r=this;r.formSubmit=o,r.error="something wrong",r.formData={},r.showStep2=!1,r.showStep3=!1,r.minYears=7671,r.dif70yers=25569,r.todayDate=new Date,r.todayDays=r.todayDate.getTime()/864e5,r.ageCheck=n,r.ageInvalid=!1,r.getCities=i}t.module("app").controller("LandingController",e),e.$inject=["$http","limitToFilter"]}(angular),function(t){"use strict";function e(t){t.state("landing",{"abstract":!0,templateUrl:"/view/modules/landing/landing.html",controller:"LandingController",controllerAs:"main"})}t.module("app").config(e),e.$inject=["$stateProvider"]}(angular),function(t){"use strict";function e(t,e,n,o,i,r,a,c,l,u){function s(){g.newTopic={topic:g.inputTopic,comments:[]}}function d(){g.createTopic(),g.topics.push(g.newTopic),c.set("topics",JSON.stringify(g.topics))}function f(t){g.topics.splice(t,1),c.set("topics",JSON.stringify(g.topics))}function p(){g.topics[g.activeTopicIndex].comments.push(g.newComment),c.set("topics",JSON.stringify(g.topics))}var g=this;g.inputTopic="",g.activeTopicIndex=0,g.topics=JSON.parse(c.get("topics"))||[],g.addTopic=d,g.delTopic=f,g.createTopic=s,g.addComment=p}t.module("app").controller("LandingHomeController",e),e.$inject=["$document","$scope","$window","WindowEventsService","HomeService","$stateParams","$timeout","storage","$cookies","$rootScope"]}(angular),function(t){"use strict";function e(t){t.state("landing.home",{url:"/",templateUrl:"/view/modules/landing/home/home.html",controller:"LandingHomeController",controllerAs:"vm",data:{title:"test task"},params:{targetSectionName:"main"}})}t.module("app").config(e),e.$inject=["$stateProvider"]}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
