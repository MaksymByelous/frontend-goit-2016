angular.module("app.config",[]).constant("appSettings",{DEV:!1,API:{HOST:""},WULIAN_OEM_ID_LENGTH:12}),function(e,t){"use strict";function n(e){return function(t){return t[e]}}var r=e.module("angular-underscore",[]),i=e.module("angular-underscore/utils",[]),a=e.module("angular-underscore/filters",[]);t._=t,t.each(["min","max","sortedIndex"],function(e){t[e]=t.wrap(t[e],function(e){var r=t.toArray(arguments).slice(1);return t.isString(r[2])?r[2]=n(r[2]):t.isString(r[1])&&(r[1]=n(r[1])),e.apply(t,r)})}),e.injector(["ng"]).invoke(["$filter",function(e){t.filter=t.select=t.wrap(e("filter"),function(e,n,r,i){return t.isArray(n)||(n=t.toArray(n)),e(n,r,i)}),t.reject=function(e,n){if(t.isString(n))return t.filter(e,"!"+n);var r=t.bind(t.difference,t,e);return r(t.filter(e,n))}}]),t.each(t.methods(t),function(n){function a(e){e[n]=t.bind(t[n],t)}t.each([r,i,e.module("angular-underscore/utils/"+n,[])],function(e){e.run(["$rootScope",a])})});var o=[["map","collect"],["reduce","inject","foldl"],["reduceRight","foldr"],["find","detect"],["filter","select"],"where","findWhere","reject","invoke","pluck","max","min","sortBy","groupBy","indexBy","countBy","shuffle","sample","toArray","size",["first","head","take"],"initial","last",["rest","tail","drop"],"compact","flatten","without","partition","union","intersection","difference",["uniq","unique"],"zip","object","indexOf","lastIndexOf","sortedIndex","keys","values","pairs","invert",["functions","methods"],"pick","omit","tap","identity","uniqueId","escape","unescape","result","template"];t.each(o,function(n){t.isArray(n)||(n=[n]);var i=t.bind(t[n[0]],t),o=function(){return i};t.each(n,function(n){t.each([r,a,e.module("angular-underscore/filters/"+n,[])],function(e){e.filter(n,o)})})})}(angular,_),function(e){"use strict";function t(e,t,n){n.defaults.withCredentials=!0,t.html5Mode({enabled:!0,requireBase:!1}),e.otherwise("/404")}function n(t,n){t.canonical="/",t.$state=n,t.$on("$stateChangeError",function(e){console.log(e)}),t.$on("$stateChangeSuccess",function(n,r,i,a){t.pageTitle=r.data&&r.data.title?r.data.title:"test task",e.element("body").scrollTop(0)}),t.broadcastScrollEvent=function(){t.$broadcast("scroll")}}e.module("app",["app.config","ngCookies","ui.bootstrap","ui.router","ngSanitize","ngResource","ngAnimate","ngMessages","ngMap","angular-loading-bar","ngTouch","angular-carousel","ngMaterial","duScroll","angular-underscore"]).value("duScrollDuration",1e3).value("duScrollOffset",100).value("duScrollActiveClass","active-slide").config(t).run(n),t.$inject=["$urlRouterProvider","$locationProvider","$httpProvider"],n.$inject=["$rootScope","$state"]}(angular),function(e){"use strict";function t(){return{}}e.module("app").factory("HomeService",t),t.$inject=[]}(angular),function(e){"use strict";function t(e){function t(t,r,i,a){var o=isNaN(a)?n.throttleTime:a,l=t?"addEventListener":"removeEventListener";e[l](r,_.throttle(i,o))}var n={throttleTime:100,listen:t};return n}e.module("app").factory("WindowEventsService",t),t.$inject=["$window"]}(angular),angular.module("app").directive("onScroll",["$timeout",function(e){"use strict";return{scope:{onScroll:"&onScroll"},link:function(t,n){var r,i=250,a=!1,o=function(){a||(t.onScroll(),a=!0,r=e(function(){a=!1},i))};n.on("scroll",o),t.$on("$destroy",function(){n.off("scroll",o)})}}}]),function(e){"use strict";function t(e,t){function n(){return a.innStr=a.formData.inn.toString().substring(0,5),a.ageCheckRes=a.todayDays+a.dif70yers-a.innStr,a.ageCheckRes>a.minYears?(a.ageInvalid=!1,!0):(a.ageInvalid=!0,!1)}function r(){e({url:"/",method:"POST",data:a.formData,headers:{"Content-Type":"application/x-www-form-urlencoded;charset=utf-8;"}}).then(function(e){alert("data sent")},function(){alert("something wrong")})}function i(){e.get("http://gd.geobytes.com/AutoCompleteCity?callback=?&q="+a.formData.city).then(function(e){a.cities=t(e.data,15)})}var a=this;a.formSubmit=r,a.error="something wrong",a.formData={},a.showStep2=!1,a.showStep3=!1,a.minYears=7671,a.dif70yers=25569,a.todayDate=new Date,a.todayDays=a.todayDate.getTime()/864e5,a.ageCheck=n,a.ageInvalid=!1,a.getCities=i}e.module("app").controller("LandingController",t),t.$inject=["$http","limitToFilter"]}(angular),function(e){"use strict";function t(e){e.state("landing",{"abstract":!0,templateUrl:"/view/modules/landing/landing.html",controller:"LandingController",controllerAs:"main"})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular),function(e){"use strict";function t(t,n,r,i,a,o,l){function c(){f.checkDulication()?alert("you are already registered"):(f["new"]=e.copy(f.formData),f.registered.push(f["new"]),alert("Data sent!"))}function u(){f.winnerObj=f.registered[Math.floor(Math.random()*f.registered.length+0)],f.winner=f.winnerObj.name+" "+f.winnerObj.surname+" "+f.winnerObj.email}function s(){f.registeredQuantity=f.registered.length;for(var e=0;e<f.registeredQuantity;e++)f.registered[e].name===f.formData.name&&f.registered[e].surname===f.formData.surname&&f.registered[e].email===f.formData.email?f.duplication=!0:f.duplication=!1;return f.duplication}function d(e){f.registered.splice(e,1)}var f=this;f.winner="....",f.findWinner=u,f.registered=[{name:"max",surname:"bels",email:"mymail",phone:6565656},{name:"ljlk",surname:"bels",email:"mymail",phone:656554656}],f.formData={},f.addRegistered=c,f.checkDulication=s,f.duplication=!1,f.deleteRegistered=d}e.module("app").controller("LandingHomeController",t),t.$inject=["$document","$scope","$window","WindowEventsService","HomeService","$stateParams","$timeout"]}(angular),function(e){"use strict";function t(e){e.state("landing.home",{url:"/",templateUrl:"/view/modules/landing/home/home.html",controller:"LandingHomeController",controllerAs:"vm",data:{title:"test task"},params:{targetSectionName:"main"}})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2QuanMiLCJhbmd1bGFyLXVuZGVyc2NvcmUuanMiLCJtYWluLmpzIiwic2VydmljZXMvaG9tZS5zZXJ2aWNlLmpzIiwic2VydmljZXMvd2luZG93LWV2ZW50cy1zZXJ2aWNlLmpzIiwiY29tcG9uZW50cy9kaXJlY3RpdmVzL29uLXNjcm9sbC5qcyIsIm1vZHVsZXMvbGFuZGluZy9sYW5kaW5nLmN0cmwuanMiLCJtb2R1bGVzL2xhbmRpbmcvbGFuZGluZy5yb3V0ZS5qcyIsIm1vZHVsZXMvbGFuZGluZy9ob21lL2hvbWUuY3RybC5qcyIsIm1vZHVsZXMvbGFuZGluZy9ob21lL2hvbWUucm91dGUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnN0YW50IiwiREVWIiwiQVBJIiwiSE9TVCIsIldVTElBTl9PRU1fSURfTEVOR1RIIiwibmciLCJfIiwicHJvcEdldHRlckZhY3RvcnkiLCJwcm9wIiwib2JqIiwidW5kZXJzY29yZU1vZHVsZSIsInV0aWxzTW9kdWxlIiwiZmlsdGVyc01vZHVsZSIsImVhY2giLCJmbk5hbWUiLCJ3cmFwIiwiZm4iLCJhcmdzIiwidG9BcnJheSIsImFyZ3VtZW50cyIsInNsaWNlIiwiaXNTdHJpbmciLCJhcHBseSIsImluamVjdG9yIiwiaW52b2tlIiwiJGZpbHRlciIsImZpbHRlciIsInNlbGVjdCIsImV4cCIsImNvbXBhcmF0b3IiLCJpc0FycmF5IiwicmVqZWN0IiwiZGlmZiIsImJpbmQiLCJkaWZmZXJlbmNlIiwibWV0aG9kcyIsIm1ldGhvZE5hbWUiLCJyZWdpc3RlciIsIiRyb290U2NvcGUiLCJydW4iLCJhZGFwTGlzdCIsImZpbHRlck5hbWVzIiwiZmlsdGVyRmFjdG9yeSIsImZpbHRlck5hbWUiLCJjb25maWd1cmUiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCJkZWZhdWx0cyIsIndpdGhDcmVkZW50aWFscyIsImh0bWw1TW9kZSIsImVuYWJsZWQiLCJyZXF1aXJlQmFzZSIsIm90aGVyd2lzZSIsInJ1bkJsb2NrIiwiJHN0YXRlIiwiY2Fub25pY2FsIiwiJG9uIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nIiwiZXZlbnQiLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJwYWdlVGl0bGUiLCJkYXRhIiwidGl0bGUiLCJlbGVtZW50Iiwic2Nyb2xsVG9wIiwiYnJvYWRjYXN0U2Nyb2xsRXZlbnQiLCIkYnJvYWRjYXN0IiwidmFsdWUiLCJjb25maWciLCIkaW5qZWN0IiwiSG9tZVNlcnZpY2UiLCJmYWN0b3J5IiwiV2luZG93RXZlbnRzU2VydmljZSIsIiR3aW5kb3ciLCJsaXN0ZW4iLCJpc09uIiwidHlwZSIsIm1ldGhvZCIsInRpbWUiLCJkZWJvdW5jZVRpbWUiLCJpc05hTiIsImFwaSIsInRocm90dGxlVGltZSIsImxpc3RlbmVyVHlwZSIsInRocm90dGxlIiwiZGlyZWN0aXZlIiwiJHRpbWVvdXQiLCJzY29wZSIsIm9uU2Nyb2xsIiwibGluayIsInNjcm9sbFRocm90dGxlVGltZW91dCIsInNjcm9sbERlbGF5IiwidGhyb3R0bGVkIiwic2Nyb2xsSGFuZGxlciIsIm9uIiwib2ZmIiwiTGFuZGluZ0NvbnRyb2xsZXIiLCIkaHR0cCIsImxpbWl0VG9GaWx0ZXIiLCJhZ2VDaGVjayIsIm1haW4iLCJpbm5TdHIiLCJmb3JtRGF0YSIsImlubiIsInRvU3RyaW5nIiwic3Vic3RyaW5nIiwiYWdlQ2hlY2tSZXMiLCJ0b2RheURheXMiLCJkaWY3MHllcnMiLCJtaW5ZZWFycyIsImFnZUludmFsaWQiLCJmb3JtU3VibWl0IiwidXJsIiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsInRoZW4iLCJyZXNwb25zZSIsImFsZXJ0IiwiZ2V0Q2l0aWVzIiwiZ2V0IiwiY2l0eSIsImNpdGllcyIsInRoaXMiLCJzaG93U3RlcDIiLCJzaG93U3RlcDMiLCJ0b2RheURhdGUiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnRyb2xsZXIiLCJsYW5kaW5nUm91dGUiLCIkc3RhdGVQcm92aWRlciIsInN0YXRlIiwiYWJzdHJhY3QiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXJBcyIsIkxhbmRpbmdIb21lQ29udHJvbGxlciIsIiRkb2N1bWVudCIsIiRzY29wZSIsIiRzdGF0ZVBhcmFtcyIsImFkZFJlZ2lzdGVyZWQiLCJ2bSIsImNoZWNrRHVsaWNhdGlvbiIsImNvcHkiLCJyZWdpc3RlcmVkIiwicHVzaCIsImZpbmRXaW5uZXIiLCJ3aW5uZXJPYmoiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ3aW5uZXIiLCJuYW1lIiwic3VybmFtZSIsImVtYWlsIiwicmVnaXN0ZXJlZFF1YW50aXR5IiwibGVuZ3RoIiwiaSIsImR1cGxpY2F0aW9uIiwiZGVsZXRlUmVnaXN0ZXJlZCIsImluZGV4Iiwic3BsaWNlIiwicGhvbmUiLCJsYW5kaW5nSG9tZVJvdXRlIiwicGFyYW1zIiwidGFyZ2V0U2VjdGlvbk5hbWUiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLGlCQUVBQyxTQUFBLGVBQ0FDLEtBQUEsRUFDQUMsS0FDQUMsS0FBQSxJQUVBQyxxQkFBQSxLQ1BBLFNBQUFDLEVBQUFDLEdBQ0EsWUFTQSxTQUFBQyxHQUFBQyxHQUNBLE1BQUEsVUFBQUMsR0FBQSxNQUFBQSxHQUFBRCxJQVJBLEdBQ0FFLEdBQUFMLEVBQUFOLE9BQUEseUJBQ0FZLEVBQUFOLEVBQUFOLE9BQUEsK0JBQ0FhLEVBQUFQLEVBQUFOLE9BQUEsZ0NBUUFPLEdBQUFBLEVBQUFBLEVBR0FBLEVBQUFPLE1BQUEsTUFBQSxNQUFBLGVBQUEsU0FBQUMsR0FDQVIsRUFBQVEsR0FBQVIsRUFBQVMsS0FBQVQsRUFBQVEsR0FBQSxTQUFBRSxHQUNBLEdBQUFDLEdBQUFYLEVBQUFZLFFBQUFDLFdBQUFDLE1BQUEsRUFXQSxPQVRBZCxHQUFBZSxTQUFBSixFQUFBLElBRUFBLEVBQUEsR0FBQVYsRUFBQVUsRUFBQSxJQUVBWCxFQUFBZSxTQUFBSixFQUFBLE1BRUFBLEVBQUEsR0FBQVYsRUFBQVUsRUFBQSxL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QUF5SyxHQUFBaEMsR0FDQUEsRUFBQUMsTUFBQSxnQkFDQW5CLElBQUEsSUFDQXFCLFlBQUEsdUNBQ0FMLFdBQUEsd0JBQ0FNLGFBQUEsS0FDQXpFLE1BQ0FDLE1BQUEsYUFFQXFHLFFBQ0FDLGtCQUFBLFVBYkEzSyxFQUFBQyxPQUFBLE9BQUEwRSxPQUFBOEYsR0FDQUEsRUFBQTdGLFNBQUEsbUJBZ0JBNUUiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImFuZ3VsYXIubW9kdWxlKFwiYXBwLmNvbmZpZ1wiLCBbXSlcblxuLmNvbnN0YW50KFwiYXBwU2V0dGluZ3NcIiwge1xuXHRcIkRFVlwiOiBmYWxzZSxcblx0XCJBUElcIjoge1xuXHRcdFwiSE9TVFwiOiBcIlwiXG5cdH0sXG5cdFwiV1VMSUFOX09FTV9JRF9MRU5HVEhcIjogMTJcbn0pXG5cbjsiLCIoZnVuY3Rpb24gKG5nLCBfKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICB2YXJcclxuICAgIHVuZGVyc2NvcmVNb2R1bGUgPSBuZy5tb2R1bGUoJ2FuZ3VsYXItdW5kZXJzY29yZScsIFtdKSxcclxuICAgIHV0aWxzTW9kdWxlID0gbmcubW9kdWxlKCdhbmd1bGFyLXVuZGVyc2NvcmUvdXRpbHMnLCBbXSksXHJcbiAgICBmaWx0ZXJzTW9kdWxlID0gbmcubW9kdWxlKCdhbmd1bGFyLXVuZGVyc2NvcmUvZmlsdGVycycsIFtdKTtcclxuXHJcbiAgLy8gYmVnaW4gY3VzdG9tIF9cclxuXHJcbiAgZnVuY3Rpb24gcHJvcEdldHRlckZhY3RvcnkocHJvcCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge3JldHVybiBvYmpbcHJvcF07fTtcclxuICB9XHJcblxyXG4gIF8uXyA9IF87XHJcblxyXG4gIC8vIFNoaXYgXCJtaW5cIiwgXCJtYXhcIiAsXCJzb3J0ZWRJbmRleFwiIHRvIGFjY2VwdCBwcm9wZXJ0eSBwcmVkaWNhdGUuXHJcbiAgXy5lYWNoKFsnbWluJywgJ21heCcsICdzb3J0ZWRJbmRleCddLCBmdW5jdGlvbihmbk5hbWUpIHtcclxuICAgIF9bZm5OYW1lXSA9IF8ud3JhcChfW2ZuTmFtZV0sIGZ1bmN0aW9uKGZuKSB7XHJcbiAgICAgIHZhciBhcmdzID0gXy50b0FycmF5KGFyZ3VtZW50cykuc2xpY2UoMSk7XHJcblxyXG4gICAgICBpZihfLmlzU3RyaW5nKGFyZ3NbMl0pKSB7XHJcbiAgICAgICAgLy8gZm9yIFwic29ydGVkSW5kZXhcIiwgdHJhbnNtdXRpbmcgc3RyIHRvIHByb3BlcnR5IGdldHRlclxyXG4gICAgICAgIGFyZ3NbMl0gPSBwcm9wR2V0dGVyRmFjdG9yeShhcmdzWzJdKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKF8uaXNTdHJpbmcoYXJnc1sxXSkpIHtcclxuICAgICAgICAvLyBmb3IgXCJtaW5cIiBvciBcIm1heFwiLCB0cmFuc211dGluZyBzdHIgdG8gcHJvcGVydHkgZ2V0dGVyXHJcbiAgICAgICAgYXJnc1sxXSA9IHByb3BHZXR0ZXJGYWN0b3J5KGFyZ3NbMV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZm4uYXBwbHkoXywgYXJncyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgLy8gU2hpdiBcImZpbHRlclwiLCBcInJlamVjdFwiIHRvIGFuZ3VsYXIncyBidWlsdC1pbixcclxuICAvLyBhbmQgcmVzZXJ2ZSB1bmRlcnNjb3JlJ3MgZmVhdHVyZSh3b3JrcyBvbiBvYmopLlxyXG4gIG5nLmluamVjdG9yKFsnbmcnXSkuaW52b2tlKFsnJGZpbHRlcicsIGZ1bmN0aW9uKCRmaWx0ZXIpIHtcclxuICAgIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBfLndyYXAoJGZpbHRlcignZmlsdGVyJyksIGZ1bmN0aW9uKGZpbHRlciwgb2JqLCBleHAsIGNvbXBhcmF0b3IpIHtcclxuICAgICAgaWYoIShfLmlzQXJyYXkob2JqKSkpIHtcclxuICAgICAgICBvYmogPSBfLnRvQXJyYXkob2JqKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZpbHRlcihvYmosIGV4cCwgY29tcGFyYXRvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgZXhwKSB7XHJcbiAgICAgIC8vIHVzZSBhbmd1bGFyIGJ1aWx0LWluIG5lZ2F0ZWQgcHJlZGljYXRlXHJcbiAgICAgIGlmKF8uaXNTdHJpbmcoZXhwKSkge1xyXG4gICAgICAgIHJldHVybiBfLmZpbHRlcihvYmosICchJyArIGV4cCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBkaWZmID0gXy5iaW5kKF8uZGlmZmVyZW5jZSwgXywgb2JqKTtcclxuXHJcbiAgICAgIHJldHVybiBkaWZmKF8uZmlsdGVyKG9iaiwgZXhwKSk7XHJcbiAgICB9O1xyXG4gIH1dKTtcclxuXHJcbiAgLy8gZW5kIGN1c3RvbSBfXHJcblxyXG5cclxuICAvLyBiZWdpbiByZWdpc3RlciBhbmd1bGFyLXVuZGVyc2NvcmUvdXRpbHNcclxuXHJcbiAgXy5lYWNoKF8ubWV0aG9kcyhfKSwgZnVuY3Rpb24obWV0aG9kTmFtZSkge1xyXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXIoJHJvb3RTY29wZSkgeyRyb290U2NvcGVbbWV0aG9kTmFtZV0gPSBfLmJpbmQoX1ttZXRob2ROYW1lXSwgXyk7fVxyXG5cclxuICAgIF8uZWFjaChbXHJcbiAgICAgIHVuZGVyc2NvcmVNb2R1bGUsXHJcbiAgICAgIHV0aWxzTW9kdWxlLFxyXG4gICAgICBuZy5tb2R1bGUoJ2FuZ3VsYXItdW5kZXJzY29yZS91dGlscy8nICsgbWV0aG9kTmFtZSwgW10pXHJcbiAgICAgIF0sIGZ1bmN0aW9uKG1vZHVsZSkge1xyXG4gICAgICAgIG1vZHVsZS5ydW4oWyckcm9vdFNjb3BlJywgcmVnaXN0ZXJdKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBlbmQgcmVnaXN0ZXIgYW5ndWxhci11bmRlcnNjb3JlL3V0aWxzXHJcblxyXG5cclxuICAvLyBiZWdpbiByZWdpc3RlciBhbmd1bGFyLXVuZGVyc2NvcmUvZmlsdGVyc1xyXG5cclxuICB2YXJcclxuICAgIGFkYXBMaXN0ID0gW1xyXG4gICAgICBbJ21hcCcsICdjb2xsZWN0J10sXHJcbiAgICAgIFsncmVkdWNlJywgJ2luamVjdCcsICdmb2xkbCddLFxyXG4gICAgICBbJ3JlZHVjZVJpZ2h0JywgJ2ZvbGRyJ10sXHJcbiAgICAgIFsnZmluZCcsICdkZXRlY3QnXSxcclxuICAgICAgWydmaWx0ZXInLCAnc2VsZWN0J10sXHJcbiAgICAgICd3aGVyZScsXHJcbiAgICAgICdmaW5kV2hlcmUnLFxyXG4gICAgICAncmVqZWN0JyxcclxuICAgICAgJ2ludm9rZScsXHJcbiAgICAgICdwbHVjaycsXHJcbiAgICAgICdtYXgnLFxyXG4gICAgICAnbWluJyxcclxuICAgICAgJ3NvcnRCeScsXHJcbiAgICAgICdncm91cEJ5JyxcclxuICAgICAgJ2luZGV4QnknLFxyXG4gICAgICAnY291bnRCeScsXHJcbiAgICAgICdzaHVmZmxlJyxcclxuICAgICAgJ3NhbXBsZScsXHJcbiAgICAgICd0b0FycmF5JyxcclxuICAgICAgJ3NpemUnLFxyXG4gICAgICBbJ2ZpcnN0JywgJ2hlYWQnLCAndGFrZSddLFxyXG4gICAgICAnaW5pdGlhbCcsXHJcbiAgICAgICdsYXN0JyxcclxuICAgICAgWydyZXN0JywgJ3RhaWwnLCAnZHJvcCddLFxyXG4gICAgICAnY29tcGFjdCcsXHJcbiAgICAgICdmbGF0dGVuJyxcclxuICAgICAgJ3dpdGhvdXQnLFxyXG4gICAgICAncGFydGl0aW9uJyxcclxuICAgICAgJ3VuaW9uJyxcclxuICAgICAgJ2ludGVyc2VjdGlvbicsXHJcbiAgICAgICdkaWZmZXJlbmNlJyxcclxuICAgICAgWyd1bmlxJywgJ3VuaXF1ZSddLFxyXG4gICAgICAnemlwJyxcclxuICAgICAgJ29iamVjdCcsXHJcbiAgICAgICdpbmRleE9mJyxcclxuICAgICAgJ2xhc3RJbmRleE9mJyxcclxuICAgICAgJ3NvcnRlZEluZGV4JyxcclxuICAgICAgJ2tleXMnLFxyXG4gICAgICAndmFsdWVzJyxcclxuICAgICAgJ3BhaXJzJyxcclxuICAgICAgJ2ludmVydCcsXHJcbiAgICAgIFsnZnVuY3Rpb25zJywgJ21ldGhvZHMnXSxcclxuICAgICAgJ3BpY2snLFxyXG4gICAgICAnb21pdCcsXHJcbiAgICAgICd0YXAnLFxyXG4gICAgICAnaWRlbnRpdHknLFxyXG4gICAgICAndW5pcXVlSWQnLFxyXG4gICAgICAnZXNjYXBlJyxcclxuICAgICAgJ3VuZXNjYXBlJyxcclxuICAgICAgJ3Jlc3VsdCcsXHJcbiAgICAgICd0ZW1wbGF0ZSdcclxuICAgIF07XHJcblxyXG4gIF8uZWFjaChhZGFwTGlzdCwgZnVuY3Rpb24oZmlsdGVyTmFtZXMpIHtcclxuICAgIGlmKCEoXy5pc0FycmF5KGZpbHRlck5hbWVzKSkpIHtcclxuICAgICAgZmlsdGVyTmFtZXMgPSBbZmlsdGVyTmFtZXNdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhclxyXG4gICAgICBmaWx0ZXIgPSBfLmJpbmQoX1tmaWx0ZXJOYW1lc1swXV0sIF8pLFxyXG4gICAgICBmaWx0ZXJGYWN0b3J5ID0gZnVuY3Rpb24oKSB7cmV0dXJuIGZpbHRlcjt9O1xyXG5cclxuICAgIF8uZWFjaChmaWx0ZXJOYW1lcywgZnVuY3Rpb24oZmlsdGVyTmFtZSkge1xyXG4gICAgICBfLmVhY2goW1xyXG4gICAgICAgIHVuZGVyc2NvcmVNb2R1bGUsXHJcbiAgICAgICAgZmlsdGVyc01vZHVsZSxcclxuICAgICAgICBuZy5tb2R1bGUoJ2FuZ3VsYXItdW5kZXJzY29yZS9maWx0ZXJzLycgKyBmaWx0ZXJOYW1lLCBbXSlcclxuICAgICAgICBdLCBmdW5jdGlvbihtb2R1bGUpIHtcclxuICAgICAgICAgIG1vZHVsZS5maWx0ZXIoZmlsdGVyTmFtZSwgZmlsdGVyRmFjdG9yeSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIC8vIGVuZCByZWdpc3RlciBhbmd1bGFyLXVuZGVyc2NvcmUvZmlsdGVyc1xyXG5cclxufShhbmd1bGFyLCBfKSk7XHJcbiIsIihmdW5jdGlvbihhbmd1bGFyKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG4gIGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXHJcbiAgICAnYXBwLmNvbmZpZycsXHJcbiAgICAnbmdDb29raWVzJyxcclxuICAgICd1aS5ib290c3RyYXAnLFxyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnbmdTYW5pdGl6ZScsXHJcbiAgICAnbmdSZXNvdXJjZScsXHJcbiAgICAnbmdBbmltYXRlJyxcclxuICAgICduZ01lc3NhZ2VzJyxcclxuICAgICduZ01hcCcsXHJcbiAgICAnYW5ndWxhci1sb2FkaW5nLWJhcicsXHJcbiAgICAnbmdUb3VjaCcsXHJcbiAgICAnYW5ndWxhci1jYXJvdXNlbCcsXHJcbiAgICAnbmdNYXRlcmlhbCcsXHJcbiAgICAnZHVTY3JvbGwnLFxyXG4gICAgJ2FuZ3VsYXItdW5kZXJzY29yZScsXHJcbiAgXSlcclxuICAgIC52YWx1ZSgnZHVTY3JvbGxEdXJhdGlvbicsIDEwMDApXHJcbiAgICAudmFsdWUoJ2R1U2Nyb2xsT2Zmc2V0JywgMTAwKVxyXG4gICAgLnZhbHVlKCdkdVNjcm9sbEFjdGl2ZUNsYXNzJywgJ2FjdGl2ZS1zbGlkZScpXHJcbiAgICAvLyAudmFsdWUoJ2R1U2Nyb2xsRWFzaW5nJywgaW52ZXJ0ZWRFYXNpbmdGdW5jdGlvbilcclxuICAgIC5jb25maWcoY29uZmlndXJlKVxyXG4gICAgLnJ1bihydW5CbG9jayk7XHJcblxyXG4gIGNvbmZpZ3VyZS4kaW5qZWN0ID0gWyckdXJsUm91dGVyUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInLCAnJGh0dHBQcm92aWRlciddO1xyXG5cclxuICBmdW5jdGlvbiBjb25maWd1cmUoJHVybFJvdXRlclByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlciwgJGh0dHBQcm92aWRlcikge1xyXG4gICAgJGh0dHBQcm92aWRlci5kZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4gICAgJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtlbmFibGVkOiB0cnVlLCByZXF1aXJlQmFzZTogZmFsc2V9KTtcclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoJy80MDQnKTtcclxuICB9XHJcblxyXG4gIHJ1bkJsb2NrLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCckc3RhdGUnXTtcclxuXHJcbiAgZnVuY3Rpb24gcnVuQmxvY2soJHJvb3RTY29wZSwgJHN0YXRlKSB7XHJcbiAgICAvLyAkcm9vdFNjb3BlLiRvbignY2xvc2UtbW9kYWxzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gICAkdWliTW9kYWxTdGFjay5kaXNtaXNzQWxsKCk7XHJcbiAgICAvLyB9KTtcclxuICAgICRyb290U2NvcGUuY2Fub25pY2FsID0gJy8nO1xyXG4gICAgJHJvb3RTY29wZS4kc3RhdGUgPSAkc3RhdGU7XHJcbiAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICB9KTtcclxuICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUpIHtcclxuICAgICAgJHJvb3RTY29wZS5wYWdlVGl0bGUgPSB0b1N0YXRlLmRhdGEgJiYgdG9TdGF0ZS5kYXRhLnRpdGxlID8gdG9TdGF0ZS5kYXRhLnRpdGxlIDogJ3Rlc3QgdGFzayc7XHJcbiAgICAgIGFuZ3VsYXIuZWxlbWVudCgnYm9keScpLnNjcm9sbFRvcCgwKTtcclxuICAgIH0pO1xyXG4gICAgJHJvb3RTY29wZS5icm9hZGNhc3RTY3JvbGxFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdzY3JvbGwnKTtcclxuICAgIH07XHJcbiAgfVxyXG59KShhbmd1bGFyKTtcclxuIiwiKGZ1bmN0aW9uIChhbmd1bGFyKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmZhY3RvcnkoJ0hvbWVTZXJ2aWNlJywgSG9tZVNlcnZpY2UpO1xyXG5cclxuICBIb21lU2VydmljZS4kaW5qZWN0ID0gW107XHJcblxyXG4gIGZ1bmN0aW9uIEhvbWVTZXJ2aWNlKCkge1xyXG5cclxuXHJcblxyXG4gIHJldHVybiB7XHJcblxyXG4gIH07XHJcbn1cclxufSlcclxuKGFuZ3VsYXIpO1xyXG4iLCIoZnVuY3Rpb24gKGFuZ3VsYXIpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuZmFjdG9yeSgnV2luZG93RXZlbnRzU2VydmljZScsIFdpbmRvd0V2ZW50c1NlcnZpY2UpO1xyXG5cclxuICBXaW5kb3dFdmVudHNTZXJ2aWNlLiRpbmplY3QgPSBbJyR3aW5kb3cnXTtcclxuXHJcbiAgZnVuY3Rpb24gV2luZG93RXZlbnRzU2VydmljZSgkd2luZG93KSB7XHJcbiAgICB2YXIgYXBpID0ge1xyXG4gICAgICB0aHJvdHRsZVRpbWU6IDEwMCxcclxuICAgICAgbGlzdGVuOiBsaXN0ZW5cclxuICAgIH07XHJcblxyXG4gICAgLy9saXN0ZW5lciB1cGRhdGVzXHJcbiAgICBmdW5jdGlvbiBsaXN0ZW4oaXNPbiwgdHlwZSwgbWV0aG9kLCB0aW1lKSB7XHJcblxyXG4gICAgICAvL2NsZWFuIHRpbWUsIGRldGVybWluZSBsaXN0ZW5lciB0eXBlXHJcbiAgICAgIHZhciBkZWJvdW5jZVRpbWUgPSBpc05hTih0aW1lKSA/IGFwaS50aHJvdHRsZVRpbWUgOiB0aW1lLFxyXG4gICAgICAgIGxpc3RlbmVyVHlwZSA9IGlzT24gPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XHJcblxyXG4gICAgICAvL3VwZGF0ZSB0aHJvdHRsZWQgbGlzdGVuZXJcclxuICAgICAgJHdpbmRvd1tsaXN0ZW5lclR5cGVdKHR5cGUsIF8udGhyb3R0bGUobWV0aG9kLCBkZWJvdW5jZVRpbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2ludGVyZmFjZVxyXG4gICAgcmV0dXJuIGFwaTtcclxuICB9XHJcbn0pKGFuZ3VsYXIpOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5kaXJlY3RpdmUoJ29uU2Nyb2xsJywgZnVuY3Rpb24oJHRpbWVvdXQpIHtcclxuICAndXNlIHN0cmljdCc7XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzY29wZToge1xyXG4gICAgICBvblNjcm9sbDogJyZvblNjcm9sbCcsXHJcbiAgICB9LFxyXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgdmFyIHNjcm9sbERlbGF5ID0gMjUwLFxyXG4gICAgICAgIHNjcm9sbFRocm90dGxlVGltZW91dCxcclxuICAgICAgICB0aHJvdHRsZWQgPSBmYWxzZSxcclxuICAgICAgICBzY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoIXRocm90dGxlZCkge1xyXG4gICAgICAgICAgICBzY29wZS5vblNjcm9sbCgpO1xyXG4gICAgICAgICAgICB0aHJvdHRsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBzY3JvbGxUaHJvdHRsZVRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgIHRocm90dGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9LCBzY3JvbGxEZWxheSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgIGVsZW1lbnQub24oXCJzY3JvbGxcIiwgc2Nyb2xsSGFuZGxlcik7XHJcblxyXG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZWxlbWVudC5vZmYoJ3Njcm9sbCcsIHNjcm9sbEhhbmRsZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9O1xyXG59KTtcclxuIiwiKGZ1bmN0aW9uKGFuZ3VsYXIpIHtcclxuICAndXNlIHN0cmljdCc7XHJcbiAgYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0xhbmRpbmdDb250cm9sbGVyJywgTGFuZGluZ0NvbnRyb2xsZXIpO1xyXG5cclxuICBMYW5kaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckaHR0cCcsICdsaW1pdFRvRmlsdGVyJ107XHJcbiAgZnVuY3Rpb24gTGFuZGluZ0NvbnRyb2xsZXIoJGh0dHAsIGxpbWl0VG9GaWx0ZXIpIHtcclxuICAgIHZhciBtYWluID0gdGhpcztcclxuXHJcbiAgICBtYWluLmZvcm1TdWJtaXQgPSBmb3JtU3VibWl0O1xyXG4gICAgbWFpbi5lcnJvciA9ICdzb21ldGhpbmcgd3JvbmcnO1xyXG4gICAgbWFpbi5mb3JtRGF0YSA9IHt9O1xyXG4gICAgbWFpbi5zaG93U3RlcDIgPSBmYWxzZTtcclxuICAgIG1haW4uc2hvd1N0ZXAzID0gZmFsc2U7XHJcblxyXG4gICAgbWFpbi5taW5ZZWFycyA9IDc2NzE7XHJcbiAgICBtYWluLmRpZjcweWVycyA9IDI1NTY5O1xyXG4gICAgbWFpbi50b2RheURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgbWFpbi50b2RheURheXMgPSAgbWFpbi50b2RheURhdGUuZ2V0VGltZSgpIC8gODY0MDAwMDA7XHJcbiAgICBtYWluLmFnZUNoZWNrID0gYWdlQ2hlY2s7XHJcbiAgICBtYWluLmFnZUludmFsaWQgPSBmYWxzZTtcclxuXHJcbiAgICBtYWluLmdldENpdGllcyA9IGdldENpdGllcztcclxuXHJcbiAgICBmdW5jdGlvbiBhZ2VDaGVjaygpIHtcclxuICAgICAgbWFpbi5pbm5TdHIgPSBtYWluLmZvcm1EYXRhLmlubi50b1N0cmluZygpLnN1YnN0cmluZygwLCA1KTtcclxuICAgICAgbWFpbi5hZ2VDaGVja1JlcyA9IG1haW4udG9kYXlEYXlzICsgbWFpbi5kaWY3MHllcnMgLSBtYWluLmlublN0cjtcclxuICAgICAgaWYgKG1haW4uYWdlQ2hlY2tSZXMgPiAgbWFpbi5taW5ZZWFycykge1xyXG4gICAgICAgIG1haW4uYWdlSW52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9ICAgZWxzZSB7XHJcbiAgICAgICAgbWFpbi5hZ2VJbnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmb3JtU3VibWl0KCkge1xyXG4gICAgICAkaHR0cCh7XHJcbiAgICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgICBkYXRhOiBtYWluLmZvcm1EYXRhLFxyXG4gICAgICAgICAgaGVhZGVyczogeydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTg7J31cclxuICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgYWxlcnQoJ2RhdGEgc2VudCcpO1xyXG4gICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3JDYWxsYmFjaygpIHtcclxuICAgICAgICAgICAgICBhbGVydChcInNvbWV0aGluZyB3cm9uZ1wiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0Q2l0aWVzKCkge1xyXG4gICAgICAkaHR0cC5nZXQoXCJodHRwOi8vZ2QuZ2VvYnl0ZXMuY29tL0F1dG9Db21wbGV0ZUNpdHk/Y2FsbGJhY2s9PyZxPVwiICsgbWFpbi5mb3JtRGF0YS5jaXR5KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgIG1haW4uY2l0aWVzID0gbGltaXRUb0ZpbHRlcihyZXNwb25zZS5kYXRhLCAxNSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn0pKGFuZ3VsYXIpO1xyXG4iLCIoZnVuY3Rpb24oYW5ndWxhcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGxhbmRpbmdSb3V0ZSk7XHJcbiAgbGFuZGluZ1JvdXRlLiRpbmplY3QgPSBbJyRzdGF0ZVByb3ZpZGVyJ107XHJcblxyXG4gIGZ1bmN0aW9uIGxhbmRpbmdSb3V0ZSgkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xhbmRpbmcnLCB7XHJcbiAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICB0ZW1wbGF0ZVVybDogJy92aWV3L21vZHVsZXMvbGFuZGluZy9sYW5kaW5nLmh0bWwnLFxyXG4gICAgICBjb250cm9sbGVyOiAnTGFuZGluZ0NvbnRyb2xsZXInLFxyXG4gICAgICBjb250cm9sbGVyQXM6ICdtYWluJ1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxufSkoYW5ndWxhcik7XHJcbiIsIihmdW5jdGlvbiAoYW5ndWxhcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignTGFuZGluZ0hvbWVDb250cm9sbGVyJywgTGFuZGluZ0hvbWVDb250cm9sbGVyKTtcclxuXHJcblxyXG4gIExhbmRpbmdIb21lQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZG9jdW1lbnQnLCAnJHNjb3BlJywgJyR3aW5kb3cnLCAnV2luZG93RXZlbnRzU2VydmljZScsXHJcbiAgICAnSG9tZVNlcnZpY2UnLCAnJHN0YXRlUGFyYW1zJywgJyR0aW1lb3V0J107XHJcbiAgZnVuY3Rpb24gTGFuZGluZ0hvbWVDb250cm9sbGVyKCRkb2N1bWVudCwgJHNjb3BlLCAkd2luZG93LCBXaW5kb3dFdmVudHNTZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIb21lU2VydmljZSwgJHN0YXRlUGFyYW1zLCAkdGltZW91dCkge1xyXG4gICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICB2bS53aW5uZXIgPSAnLi4uLic7XHJcbiAgICB2bS5maW5kV2lubmVyID0gZmluZFdpbm5lcjtcclxuICAgIHZtLnJlZ2lzdGVyZWQgPSBbIHtuYW1lOiAnbWF4Jywgc3VybmFtZTogJ2JlbHMnLCBlbWFpbDogJ215bWFpbCcsIHBob25lOiA2NTY1NjU2fSxcclxuICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnbGpsaycsIHN1cm5hbWU6ICdiZWxzJywgZW1haWw6ICdteW1haWwnLCBwaG9uZTogNjU2NTU0NjU2fV07XHJcbiAgICB2bS5mb3JtRGF0YSA9IHt9O1xyXG4gICAgdm0uYWRkUmVnaXN0ZXJlZCA9IGFkZFJlZ2lzdGVyZWQ7XHJcbiAgICB2bS5jaGVja0R1bGljYXRpb24gPSBjaGVja0R1bGljYXRpb247XHJcbiAgICB2bS5kdXBsaWNhdGlvbiA9IGZhbHNlO1xyXG4gICAgdm0uZGVsZXRlUmVnaXN0ZXJlZCA9IGRlbGV0ZVJlZ2lzdGVyZWQ7XHJcblxyXG4gICAgZnVuY3Rpb24gYWRkUmVnaXN0ZXJlZCgpIHtcclxuICAgICAgaWYodm0uY2hlY2tEdWxpY2F0aW9uKCkpIHtcclxuICAgICAgICBhbGVydCgneW91IGFyZSBhbHJlYWR5IHJlZ2lzdGVyZWQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2bS5uZXcgPSBhbmd1bGFyLmNvcHkodm0uZm9ybURhdGEpO1xyXG4gICAgICAgIHZtLnJlZ2lzdGVyZWQucHVzaCh2bS5uZXcpO1xyXG4gICAgICAgIGFsZXJ0KCdEYXRhIHNlbnQhJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmaW5kV2lubmVyKCkge1xyXG4gICAgICB2bS53aW5uZXJPYmogPSB2bS5yZWdpc3RlcmVkW01hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAodm0ucmVnaXN0ZXJlZC5sZW5ndGgpKSArIDApXTtcclxuICAgICAgdm0ud2lubmVyID0gdm0ud2lubmVyT2JqLm5hbWUgKyAnICcgKyB2bS53aW5uZXJPYmouc3VybmFtZSArICcgJyArIHZtLndpbm5lck9iai5lbWFpbDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjaGVja0R1bGljYXRpb24oKSB7XHJcbiAgICAgIHZtLnJlZ2lzdGVyZWRRdWFudGl0eSA9IHZtLnJlZ2lzdGVyZWQubGVuZ3RoO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLnJlZ2lzdGVyZWRRdWFudGl0eTsgaSsrKSB7XHJcbiAgICAgICAgaWYodm0ucmVnaXN0ZXJlZFtpXS5uYW1lID09PSB2bS5mb3JtRGF0YS5uYW1lICYmIHZtLnJlZ2lzdGVyZWRbaV0uc3VybmFtZSA9PT0gdm0uZm9ybURhdGEuc3VybmFtZSAmJiB2bS5yZWdpc3RlcmVkW2ldLmVtYWlsID09PSB2bS5mb3JtRGF0YS5lbWFpbCkge1xyXG4gICAgICAgICAgdm0uZHVwbGljYXRpb24gPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2bS5kdXBsaWNhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdm0uZHVwbGljYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZGVsZXRlUmVnaXN0ZXJlZChpbmRleCkge1xyXG4gICAgICB2bS5yZWdpc3RlcmVkLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn0pKGFuZ3VsYXIpO1xyXG4iLCIoZnVuY3Rpb24oYW5ndWxhcikge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuICBhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29uZmlnKGxhbmRpbmdIb21lUm91dGUpO1xyXG4gIGxhbmRpbmdIb21lUm91dGUuJGluamVjdCA9IFsnJHN0YXRlUHJvdmlkZXInXTtcclxuXHJcbiAgZnVuY3Rpb24gbGFuZGluZ0hvbWVSb3V0ZSgkc3RhdGVQcm92aWRlcikge1xyXG4gICAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoJ2xhbmRpbmcuaG9tZScsIHtcclxuICAgICAgdXJsOiAnLycsXHJcbiAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXcvbW9kdWxlcy9sYW5kaW5nL2hvbWUvaG9tZS5odG1sJyxcclxuICAgICAgY29udHJvbGxlcjogJ0xhbmRpbmdIb21lQ29udHJvbGxlcicsXHJcbiAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgZGF0YToge1xyXG4gICAgICAgIHRpdGxlOiAndGVzdCB0YXNrJ1xyXG4gICAgICB9LFxyXG4gICAgICBwYXJhbXM6IHtcclxuICAgICAgICB0YXJnZXRTZWN0aW9uTmFtZTogJ21haW4nXHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxufSkoYW5ndWxhcik7XHJcbiJdfQ==
