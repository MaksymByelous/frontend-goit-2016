angular.module("app.config",[]).constant("appSettings",{DEV:!1,API:{HOST:""},WULIAN_OEM_ID_LENGTH:12}),function(e,t){"use strict";function n(e){return function(t){return t[e]}}var i=e.module("angular-underscore",[]),o=e.module("angular-underscore/utils",[]),r=e.module("angular-underscore/filters",[]);t._=t,t.each(["min","max","sortedIndex"],function(e){t[e]=t.wrap(t[e],function(e){var i=t.toArray(arguments).slice(1);return t.isString(i[2])?i[2]=n(i[2]):t.isString(i[1])&&(i[1]=n(i[1])),e.apply(t,i)})}),e.injector(["ng"]).invoke(["$filter",function(e){t.filter=t.select=t.wrap(e("filter"),function(e,n,i,o){return t.isArray(n)||(n=t.toArray(n)),e(n,i,o)}),t.reject=function(e,n){if(t.isString(n))return t.filter(e,"!"+n);var i=t.bind(t.difference,t,e);return i(t.filter(e,n))}}]),t.each(t.methods(t),function(n){function r(e){e[n]=t.bind(t[n],t)}t.each([i,o,e.module("angular-underscore/utils/"+n,[])],function(e){e.run(["$rootScope",r])})});var a=[["map","collect"],["reduce","inject","foldl"],["reduceRight","foldr"],["find","detect"],["filter","select"],"where","findWhere","reject","invoke","pluck","max","min","sortBy","groupBy","indexBy","countBy","shuffle","sample","toArray","size",["first","head","take"],"initial","last",["rest","tail","drop"],"compact","flatten","without","partition","union","intersection","difference",["uniq","unique"],"zip","object","indexOf","lastIndexOf","sortedIndex","keys","values","pairs","invert",["functions","methods"],"pick","omit","tap","identity","uniqueId","escape","unescape","result","template"];t.each(a,function(n){t.isArray(n)||(n=[n]);var o=t.bind(t[n[0]],t),a=function(){return o};t.each(n,function(n){t.each([i,r,e.module("angular-underscore/filters/"+n,[])],function(e){e.filter(n,a)})})})}(angular,_),function(e){"use strict";function t(e,t,n){n.defaults.withCredentials=!0,t.html5Mode({enabled:!0,requireBase:!1}),e.otherwise("/404")}function n(t,n){t.canonical="/",t.$state=n,t.$on("$stateChangeError",function(e){console.log(e)}),t.$on("$stateChangeSuccess",function(n,i,o,r){t.pageTitle=i.data&&i.data.title?i.data.title:"test task",e.element("body").scrollTop(0)}),t.broadcastScrollEvent=function(){t.$broadcast("scroll")}}e.module("app",["app.config","ngCookies","ui.bootstrap","ui.router","ngSanitize","ngResource","ngAnimate","ngMessages","ngMap","angular-loading-bar","ngTouch","angular-carousel","ngMaterial","duScroll","angular-underscore"]).value("duScrollDuration",1e3).value("duScrollOffset",100).value("duScrollActiveClass","active-slide").config(t).run(n),t.$inject=["$urlRouterProvider","$locationProvider","$httpProvider"],n.$inject=["$rootScope","$state"]}(angular),function(e){"use strict";function t(){var e=[{title:"Partnership for future without lie",titleFoto:"/img/news/news3-title.jpg",description:"Award-winning investigative journalist Diane Francis with Kira Rudik, Verified, Management and Operations, united their common forces to develop a project...",detailedDescription:{paragraph1:"Award-winning investigative journalist Diane Francis with Kira Rudik, Verified, Management and Operations, united their common forces to develop a project aimed to help people to find true statements in our fast-changing information society.",paragraph2:"It will be a real-time fact checking tool verifying statement and then receiving a rating about the accuracy of this ‘fact.’ Fact checking enables us to sort through a tidal wave of massive information and communication."},day:"",month:"June",year:"2017",image:"/img/news/news3.jpg"},{title:"Vsevolod Dyomkin about Verified Prototype",titleFoto:"/img/news/news2-title.jpg",description:"Verified is a prototype of the program that can determine whether the news is true or fake. The program checks the text for inconsistencies. The question is...",detailedDescription:{paragraph1:"Verified is a prototype of the program that can determine whether the news is true or fake. The program checks the text for inconsistencies. The question is “How the program works?”. There is a special field to enter the text: claims or quotes. After entering, the prototype compares it with other web sources.",paragraph2:"The program analyses data and finds confirmation or refutation. As the result, we get information that can confirm or refute this claim. If the result was not found, the claim is not confirmed. Verified goal is to help our society to identify the fake news and find the truth."},day:"",month:"May",year:"2017",image:"/img/news/news2.jpg"},{title:'The meet-up “Features and models of NLP"',titleFoto:"/img/news/news1-title.jpg",description:"The meet-up 'What features and models do work in NLP and why' was held on February, 10 by Vsevolod Dyomkin, Lisp Engineer, independent developer and expert in NLP.",detailedDescription:{paragraph1:"The meet-up 'What features and models do work in NLP and why' was held on February, 10 by Vsevolod Dyomkin, Lisp Engineer, independent developer and expert in NLP.",paragraph2:"Vsevolod spoke about linear models, random forest, RNN, morphological features, 1-hot encoding and word-embeddings. Meet-up was intended on audience with good experience in ML, who wanted to learn new information."},day:"10",month:"February",year:"2017",image:"/img/news/news1.jpg"}];return{news:e}}e.module("app").factory("HomeService",t),t.$inject=[]}(angular),function(e){"use strict";function t(){var e="admin",t="pass",n=!1;return{login:function(i,o){return n=i===e&&o===t},isAuthenticated:function(){return n}}}e.module("app").factory("LoginService",t)}(angular),function(e){"use strict";function t(){var e=[{name:"Diane",position:"Author, Professional Corporate Director, Professor, Entrepreneur, expert on Silicon Valley, future technology",image:"fransis.jpg"},{name:"Jason",position:"Serial Venture Capitalist, Viewdle",image:"jason.jpg"},{name:"Kira",position:"Management and Operations",image:"kira.jpg"},{name:"Vsevolod",position:"World-Class researcher, Kyiv Polytechnic lecturer, 5 years NLP with Grammarly",image:"dyomkin.jpg"}],t=[{name:"Taras",position:"Researcher",image:"taras-sereda-0006.jpg"},{name:"Aleksandr",position:"Full Stack Developer",image:"alex-lapshyn.jpg"}];return{team:t,directors:e}}e.module("app").factory("TeamService",t),t.$inject=[]}(angular),function(e){"use strict";function t(e){function t(t,i,o,r){var a=isNaN(r)?n.throttleTime:r,s=t?"addEventListener":"removeEventListener";e[s](i,_.throttle(o,a))}var n={throttleTime:100,listen:t};return n}e.module("app").factory("WindowEventsService",t),t.$inject=["$window"]}(angular),function(e){"use strict";function t(e,t,n,i){i.isAuthenticated()||n.transitionTo("landing.login")}e.module("app").controller("LandingController",t),t.$inject=["$rootScope","$location","$state","LoginService"]}(angular),function(e){"use strict";function t(e){e.state("landing",{"abstract":!0,templateUrl:"/view/modules/landing/landing.html",controller:"LandingController",controllerAs:"main"})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular),angular.module("app").directive("onScroll",["$timeout",function(e){"use strict";return{scope:{onScroll:"&onScroll"},link:function(t,n){var i,o=250,r=!1,a=function(){r||(t.onScroll(),r=!0,i=e(function(){r=!1},o))};n.on("scroll",a),t.$on("$destroy",function(){n.off("scroll",a)})}}}]),function(e){"use strict";function t(e,t){var n=this;n.eventIndex=e.eventIndex,n.news=t.news,n.event=n.news[n.eventIndex]}e.module("app").controller("LandingEventController",t),t.$inject=["$stateParams","HomeService"]}(angular),function(e){"use strict";function t(e){e.state("landing.event",{url:"/page2/:eventIndex",templateUrl:"/view/modules/landing/event/event.html",controller:"LandingEventController",controllerAs:"vm",data:{title:"event"}})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular),function(e){"use strict";function t(t,n,i,o,r,a,s,l){function c(e){g.activePage="activePage"}function u(){g.menuIsOpen=!g.menuIsOpen}function d(e){s(function(){t.scrollToElementAnimated(g.sections[e].element,0)},100)}function m(){g.eventsGridHeight=e.element(document.getElementById("events-grid"))[0].clientHeight}var g=this;g.targetSectionName=a.targetSectionName,g.menuIsOpen=!1,g.windowWidth=i.innerWidth,g.windowHeight=i.innerHeight,g.windowY=0,g.arrowDown=!1,g.activePage="main",g.scrollTo=d,g.sections={0:{element:e.element(document.getElementById("main")),name:"main"},1:{element:e.element(document.getElementById("about")),name:"about"}},g.arrows=[{section:0,direction:1}],g.toggleMobileMenu=u,g.getElementsHeight=m,g.toggleActivePage=c,g.targetSectionName&&(e.forEach(g.sections,function(e,t){g.targetSectionName==e.name&&(g.targetSectionId=t)}),g.scrollTo(g.targetSectionId))}e.module("app").controller("LandingHomeController",t),t.$inject=["$document","$scope","$window","WindowEventsService","HomeService","$stateParams","$timeout","TeamService"]}(angular),function(e){"use strict";function t(e){e.state("landing.home",{url:"/",templateUrl:"/view/modules/landing/home/home.html",controller:"LandingHomeController",controllerAs:"vm",data:{title:"test task"},params:{targetSectionName:"main"}})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular),function(e){"use strict";function t(e,t,n,i,o){function r(){o.login(a.username,a.password)?(a.error="",a.username="",a.password="",i.transitionTo("landing.home")):a.error="Incorrect username/password !"}var a=this;a.formSubmit=r}e.module("app").controller("LandingLoginController",t),t.$inject=["$stateParams","$scope","$rootScope","$state","LoginService"]}(angular),function(e){"use strict";function t(e){e.state("landing.login",{url:"/login",templateUrl:"/view/modules/landing/login/login.html",controller:"LandingLoginController",controllerAs:"vm",data:{title:"login"}})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular),function(e){"use strict";function t(e,t,n,i,o,r,a){function s(){p.scrollY=n.scrollY,i.$apply()}function l(t){e.scrollToElementAnimated(p.sections[t].element)}function c(){p.menuIsOpen=!p.menuIsOpen}function u(){p.windowWidth=n.innerWidth,o(u,200)}function d(){p.windowWidth>700?p.newsListWidth+p.newsLeftOut<2.5*p.newsItemWidth?p.newsLeftOut=.29*p.windowWidth:p.newsLeftOut-=p.newsItemWidth:p.newsListWidth+p.newsLeftOut<2.5*p.newsItemWidth?p.newsLeftOut=2:p.newsLeftOut-=p.newsItemWidth}function m(){p.windowWidth>700?p.newsLeftOut/p.windowWidth>.73?p.newsLeftOut=.29*p.windowWidth:p.newsLeftOut+=p.newsItemWidth:p.newsLeftOut<3&&p.newsLeftOut>-100?p.newsLeftOut=-p.newsItemWidth*(p.news.length-1):p.newsLeftOut+=p.newsItemWidth}function g(){p.detailedNewsOpened=!p.detailedNewsOpened}var p=this;p.scrollY=0,p.menuIsOpen=!1,p.toggleMobileMenu=c,p.scrollTo=l,p.windowWidth=n.innerWidth,p.windowHeight=n.innerHeight,p.windowY=0,p.news=r.news,p.newsLeftOut=.29*p.windowWidth,p.newsItemWidth=400,p.newsListWidth=p.news.length*p.newsItemWidth,p.newsLeft=d,p.newsRight=m,p.openNews={},p.detailedNewsOpened=!1,p.newsDetalsToggle=g,p.leftArrowHovered=!1,p.rightArrowHovered=!1,t.listen(!0,"scroll",s),p.windowWidth<700&&(p.newsLeftOut=2,p.newsItemWidth=330),u()}e.module("app").controller("LandingPage2Controller",t),t.$inject=["$document","WindowEventsService","$window","$scope","$timeout","HomeService","$stateParams"]}(angular),function(e){"use strict";function t(e){e.state("landing.page2",{url:"/page2",templateUrl:"/view/modules/landing/page2/page2.html",controller:"LandingPage2Controller",controllerAs:"vm",data:{title:"page 2"}})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular),function(e){"use strict";function t(e,t,n,i,o,r,a){function s(){u.scrollY=n.scrollY,i.$apply()}function l(t){e.scrollToElementAnimated(u.sections[t].element)}function c(){u.menuIsOpen=!u.menuIsOpen}var u=this;u.scrollY=0,u.menuIsOpen=!1,u.toggleMobileMenu=c,u.scrollTo=l,u.windowWidth=n.innerWidth,u.windowHeight=n.innerHeight,u.windowY=0,u.directors=r.directors,u.staff=r.team,t.listen(!0,"scroll",s)}e.module("app").controller("LandingPage3Controller",t),t.$inject=["$document","WindowEventsService","$window","$scope","$timeout","TeamService","$stateParams"]}(angular),function(e){"use strict";function t(e){e.state("landing.page3",{url:"/page3",templateUrl:"/view/modules/landing/page3/page3.html",controller:"LandingPage3Controller",controllerAs:"vm",data:{title:"page 3"}})}e.module("app").config(t),t.$inject=["$stateProvider"]}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
