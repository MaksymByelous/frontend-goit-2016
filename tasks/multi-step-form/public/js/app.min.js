angular.module("app.config", [])

.constant("appSettings", {
	"DEV": true,
	"API": {
		"HOST": ""
	},
	"WULIAN_OEM_ID_LENGTH": 12
})

;
(function (ng, _) {
  'use strict';

  var
    underscoreModule = ng.module('angular-underscore', []),
    utilsModule = ng.module('angular-underscore/utils', []),
    filtersModule = ng.module('angular-underscore/filters', []);

  // begin custom _

  function propGetterFactory(prop) {
    return function(obj) {return obj[prop];};
  }

  _._ = _;

  // Shiv "min", "max" ,"sortedIndex" to accept property predicate.
  _.each(['min', 'max', 'sortedIndex'], function(fnName) {
    _[fnName] = _.wrap(_[fnName], function(fn) {
      var args = _.toArray(arguments).slice(1);

      if(_.isString(args[2])) {
        // for "sortedIndex", transmuting str to property getter
        args[2] = propGetterFactory(args[2]);
      }
      else if(_.isString(args[1])) {
        // for "min" or "max", transmuting str to property getter
        args[1] = propGetterFactory(args[1]);
      }

      return fn.apply(_, args);
    });
  });

  // Shiv "filter", "reject" to angular's built-in,
  // and reserve underscore's feature(works on obj).
  ng.injector(['ng']).invoke(['$filter', function($filter) {
    _.filter = _.select = _.wrap($filter('filter'), function(filter, obj, exp, comparator) {
      if(!(_.isArray(obj))) {
        obj = _.toArray(obj);
      }

      return filter(obj, exp, comparator);
    });

    _.reject = function(obj, exp) {
      // use angular built-in negated predicate
      if(_.isString(exp)) {
        return _.filter(obj, '!' + exp);
      }

      var diff = _.bind(_.difference, _, obj);

      return diff(_.filter(obj, exp));
    };
  }]);

  // end custom _


  // begin register angular-underscore/utils

  _.each(_.methods(_), function(methodName) {
    function register($rootScope) {$rootScope[methodName] = _.bind(_[methodName], _);}

    _.each([
      underscoreModule,
      utilsModule,
      ng.module('angular-underscore/utils/' + methodName, [])
      ], function(module) {
        module.run(['$rootScope', register]);
    });
  });

  // end register angular-underscore/utils


  // begin register angular-underscore/filters

  var
    adapList = [
      ['map', 'collect'],
      ['reduce', 'inject', 'foldl'],
      ['reduceRight', 'foldr'],
      ['find', 'detect'],
      ['filter', 'select'],
      'where',
      'findWhere',
      'reject',
      'invoke',
      'pluck',
      'max',
      'min',
      'sortBy',
      'groupBy',
      'indexBy',
      'countBy',
      'shuffle',
      'sample',
      'toArray',
      'size',
      ['first', 'head', 'take'],
      'initial',
      'last',
      ['rest', 'tail', 'drop'],
      'compact',
      'flatten',
      'without',
      'partition',
      'union',
      'intersection',
      'difference',
      ['uniq', 'unique'],
      'zip',
      'object',
      'indexOf',
      'lastIndexOf',
      'sortedIndex',
      'keys',
      'values',
      'pairs',
      'invert',
      ['functions', 'methods'],
      'pick',
      'omit',
      'tap',
      'identity',
      'uniqueId',
      'escape',
      'unescape',
      'result',
      'template'
    ];

  _.each(adapList, function(filterNames) {
    if(!(_.isArray(filterNames))) {
      filterNames = [filterNames];
    }

    var
      filter = _.bind(_[filterNames[0]], _),
      filterFactory = function() {return filter;};

    _.each(filterNames, function(filterName) {
      _.each([
        underscoreModule,
        filtersModule,
        ng.module('angular-underscore/filters/' + filterName, [])
        ], function(module) {
          module.filter(filterName, filterFactory);
      });
    });
  });

  // end register angular-underscore/filters

}(angular, _));

(function(angular) {
  'use strict';
  angular.module('app', [
    'app.config',
    'ngCookies',
    'ui.bootstrap',
    'ui.router',
    'ngSanitize',
    'ngResource',
    'ngAnimate',
    'ngMessages',
    'ngMap',
    'angular-loading-bar',
    'ngTouch',
    'angular-carousel',
    'ngMaterial',
    'duScroll',
    'angular-underscore',
  ])
    .value('duScrollDuration', 1000)
    .value('duScrollOffset', 100)
    .value('duScrollActiveClass', 'active-slide')
    // .value('duScrollEasing', invertedEasingFunction)
    .config(configure)
    .run(runBlock);

  configure.$inject = ['$urlRouterProvider', '$locationProvider', '$httpProvider'];

  function configure($urlRouterProvider, $locationProvider, $httpProvider) {
    $httpProvider.defaults.withCredentials = true;
    $locationProvider.html5Mode({enabled: true, requireBase: false});
    $urlRouterProvider.otherwise('/404');
  }

  runBlock.$inject = ['$rootScope','$state'];

  function runBlock($rootScope, $state) {
    // $rootScope.$on('close-modals', function () {
    //   $uibModalStack.dismissAll();
    // });
    $rootScope.canonical = '/';
    $rootScope.$state = $state;
    $rootScope.$on('$stateChangeError', function(error) {
      console.log(error);
    });
    $rootScope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState) {
      $rootScope.pageTitle = toState.data && toState.data.title ? toState.data.title : 'test task';
      angular.element('body').scrollTop(0);
    });
    $rootScope.broadcastScrollEvent = function () {
      $rootScope.$broadcast('scroll');
    };
  }
})(angular);

(function (angular) {
  "use strict";
  angular.module('app').factory('HomeService', HomeService);

  HomeService.$inject = [];

  function HomeService() {

    var news = [
        {
          title: 'Partnership for future without lie',
          titleFoto:'/img/news/news3-title.jpg',
          description: "Award-winning investigative journalist Diane Francis with Kira Rudik, Verified, Management and Operations, united their common forces to develop a project...",
          detailedDescription: {
            paragraph1: "Award-winning investigative journalist Diane Francis with Kira Rudik, Verified, Management and Operations, united their common forces to develop a project aimed to help people to find true statements in our fast-changing information society.",
            paragraph2: "It will be a real-time fact checking tool verifying statement and then receiving a rating about the accuracy of this ‘fact.’ Fact checking enables us to sort through a tidal wave of massive information and communication."
          },
          day: '',
          month: 'June',
          year: '2017',
          image: '/img/news/news3.jpg'
        },
        {
          title: 'Vsevolod Dyomkin about Verified Prototype',
          titleFoto:'/img/news/news2-title.jpg',
          description: "Verified is a prototype of the program that can determine whether the news is true or fake. The program checks the text for inconsistencies. The question is...",
          detailedDescription: {
            paragraph1: "Verified is a prototype of the program that can determine whether the news is true or fake. The program checks the text for inconsistencies. The question is “How the program works?”. There is a special field to enter the text: claims or quotes. After entering, the prototype compares it with other web sources.",
            paragraph2: "The program analyses data and finds confirmation or refutation. As the result, we get information that can confirm or refute this claim. If the result was not found, the claim is not confirmed. Verified goal is to help our society to identify the fake news and find the truth."
          },
          day: '',
          month: 'May',
          year: '2017',
          image: '/img/news/news2.jpg'
        },
        {
          title: 'The meet-up “Features and models of NLP"',
          titleFoto:'/img/news/news1-title.jpg',
          description: "The meet-up 'What features and models do work in NLP and why' was held on February, 10 by Vsevolod Dyomkin, Lisp Engineer, independent developer and expert in NLP.",
          detailedDescription: {
            paragraph1: "The meet-up 'What features and models do work in NLP and why' was held on February, 10 by Vsevolod Dyomkin, Lisp Engineer, independent developer and expert in NLP.",
            paragraph2: "Vsevolod spoke about linear models, random forest, RNN, morphological features, 1-hot encoding and word-embeddings. Meet-up was intended on audience with good experience in ML, who wanted to learn new information."
          },
          day: '10',
          month: 'February',
          year: '2017',
          image: '/img/news/news1.jpg'
        }
      ];

  return {
    news: news
  };
}
})
(angular);

(function (angular) {
  "use strict";
  angular.module('app').factory('TeamService', TeamService);

  TeamService.$inject = [];

  function TeamService() {

    var directors = [
      { name: 'Diane Francis',
        position:'Author, Professional Corporate Director, Professor, Entrepreneur, expert on Silicon Valley, future technology',
        image: 'fransis.jpg'
      },
      { name: 'Jason Mitura',
        position:'Serial Venture Capitalist, Viewdle',
        image: 'jason.jpg'
      },
      { name: 'Kira	Rudik',
        position:'Management and Operations',
        image: 'kira.jpg'
      },
      { name: 'Vsevolod Dyomkin',
        position:'World-Class researcher, Kyiv Polytechnic lecturer, 5 years NLP with Grammarly',
        image: 'dyomkin.jpg'
      }
    ];
    var team = [
        {name: 'Taras', position:'Researcher', image: 'taras-sereda-0006.jpg'},
        {name: 'Aleksandr', position:'Full Stack Developer', image: 'alex-lapshyn.jpg'}
      ];

    return {
      team: team,
      directors: directors
    };
  }
})(angular);

(function (angular) {
  "use strict";
  angular.module('app').factory('WindowEventsService', WindowEventsService);

  WindowEventsService.$inject = ['$window'];

  function WindowEventsService($window) {
    var api = {
      throttleTime: 100,
      listen: listen
    };

    //listener updates
    function listen(isOn, type, method, time) {

      //clean time, determine listener type
      var debounceTime = isNaN(time) ? api.throttleTime : time,
        listenerType = isOn ? 'addEventListener' : 'removeEventListener';

      //update throttled listener
      $window[listenerType](type, _.throttle(method, debounceTime));
    }

    //interface
    return api;
  }
})(angular);
angular.module('app').directive('onScroll', ["$timeout", function($timeout) {
  'use strict';

  return {
    scope: {
      onScroll: '&onScroll',
    },
    link: function(scope, element) {
      var scrollDelay = 250,
        scrollThrottleTimeout,
        throttled = false,
        scrollHandler = function() {
          if (!throttled) {
            scope.onScroll();
            throttled = true;
            scrollThrottleTimeout = $timeout(function(){
              throttled = false;
            }, scrollDelay);
          }
        };

      element.on("scroll", scrollHandler);

      scope.$on('$destroy', function() {
        element.off('scroll', scrollHandler);
      });
    }
  };
}]);

(function(angular) {
  'use strict';
  angular.module('app').controller('LandingController', LandingController);

  LandingController.$inject = ['$http', 'limitToFilter'];
  function LandingController($http, limitToFilter) {
    var main = this;

    main.formSubmit = formSubmit;
    main.error = 'something wrong';
    main.formData = {};
    main.showStep2 = false;
    main.showStep3 = false;

    main.minYears = 7671;
    main.dif70yers = 25569;
    main.todayDate = new Date();
    main.todayDays =  main.todayDate.getTime() / 86400000;
    main.ageCheck = ageCheck;
    main.ageInvalid = false;

    main.getCities = getCities;

    function ageCheck() {
      main.innStr = main.formData.inn.toString().substring(0, 5);
      main.ageCheckRes = main.todayDays + main.dif70yers - main.innStr;
      if (main.ageCheckRes >  main.minYears) {
        main.ageInvalid = false;
        return true;
      }   else {
        main.ageInvalid = true;
        return false;
      }
    }

    function formSubmit() {
      $http({
          url: '/',
          method: "POST",
          data: main.formData,
          headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8;'}
          }).then(function successCallback(response) {
              alert('data sent');
          }, function errorCallback() {
              alert("something wrong");
            });
    }

    function getCities() {
      $http.get("http://gd.geobytes.com/AutoCompleteCity?callback=?&q=" + main.formData.city).then(function (response) {
        main.cities = limitToFilter(response.data, 15);
      });
    }
  }

})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingRoute);
  landingRoute.$inject = ['$stateProvider'];

  function landingRoute($stateProvider) {
    $stateProvider.state('landing', {
      abstract: true,
      templateUrl: '/view/modules/landing/landing.html',
      controller: 'LandingController',
      controllerAs: 'main'

    });
  }
})(angular);

(function (angular) {
  'use strict';
  angular.module('app').controller('LandingHomeController', LandingHomeController);


  LandingHomeController.$inject = ['$document', '$scope', '$window', 'WindowEventsService',
    'HomeService', '$stateParams', '$timeout', 'TeamService'];
  function LandingHomeController($document, $scope, $window, WindowEventsService,
                                 HomeService, $stateParams, $timeout, TeamService) {
    var vm = this;

    vm.scrollTo = scrollTo;


    function scrollTo(elementIndex) {
      $timeout(function () {
        $document.scrollToElementAnimated(vm.sections[elementIndex].element, 0);
      }, 100);
    }

    function getElementsHeight() {
      vm.eventsGridHeight = angular.element(document.getElementById('events-grid'))[0].clientHeight;
    }

  }

})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingHomeRoute);
  landingHomeRoute.$inject = ['$stateProvider'];

  function landingHomeRoute($stateProvider) {
    $stateProvider.state('landing.home', {
      url: '/',
      templateUrl: '/view/modules/landing/home/home.html',
      controller: 'LandingHomeController',
      controllerAs: 'vm',
      data: {
        title: 'test task'
      },
      params: {
        targetSectionName: 'main'
      }
    });
  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').controller('LandingPage2Controller', LandingPage2Controller);

  LandingPage2Controller.$inject = ['$document', 'WindowEventsService', '$window', '$scope', '$timeout',
  'HomeService', '$stateParams'];
  function LandingPage2Controller($document, WindowEventsService, $window, $scope, $timeout,
     HomeService, $stateParams) {
    var vm = this;

    vm.scrollY = 0;
    vm.menuIsOpen = false;
    vm.toggleMobileMenu = toggleMobileMenu;
    vm.scrollTo = scrollTo;
    vm.windowWidth = $window.innerWidth;
    vm.windowHeight = $window.innerHeight;
    vm.windowY = 0;
    vm.news = HomeService.news;
    vm.newsLeftOut = vm.windowWidth * 0.29;
    vm.newsItemWidth = 400;
    vm.newsListWidth = vm.news.length * vm.newsItemWidth;
    vm.newsLeft = newsLeft;
    vm.newsRight = newsRight;
    vm.openNews = {};
    vm.detailedNewsOpened = false;
    vm.newsDetalsToggle = newsDetalsToggle;
    vm.leftArrowHovered = false;
    vm.rightArrowHovered = false;

    WindowEventsService.listen(true, 'scroll', defineScrollY);

    function defineScrollY() {
      vm.scrollY = $window.scrollY;
      $scope.$apply();
    }

    function scrollTo(sectionName) {
      $document.scrollToElementAnimated(vm.sections[sectionName].element);
    }

    function toggleMobileMenu() {
      vm.menuIsOpen = !vm.menuIsOpen;
    }


    if (vm.windowWidth < 700) {
      vm.newsLeftOut = 2;
      vm.newsItemWidth = 330;
    }

    function checkWindowWidth(){
        vm.windowWidth = $window.innerWidth;
        $timeout( checkWindowWidth, 200 );
    }
    checkWindowWidth();

    function eventDetails(event) {
      vm.selectedEvent = event;
      vm.showEventDetails = true;
    }

    function newsLeft() {
      if (vm.windowWidth > 700) {
        if(  (vm.newsListWidth + vm.newsLeftOut) < (vm.newsItemWidth * 2.5)  ) {
          vm.newsLeftOut = vm.windowWidth * 0.29;
        } else {
          vm.newsLeftOut -= vm.newsItemWidth;
        }
      } else {
        if(  (vm.newsListWidth + vm.newsLeftOut) < (vm.newsItemWidth*2.5)  ) {
          vm.newsLeftOut = 2;
        } else {
          vm.newsLeftOut -= vm.newsItemWidth;
        }
      }
    }

    function newsRight() {
      if (vm.windowWidth > 700) {
        if(  (vm.newsLeftOut/vm.windowWidth) > 0.73  ) {
          vm.newsLeftOut = vm.windowWidth * 0.29;
        } else {
          vm.newsLeftOut += vm.newsItemWidth;
        }
      } else {
        if(  vm.newsLeftOut < 3 && vm.newsLeftOut > -100  ) {
          vm.newsLeftOut = - vm.newsItemWidth * (vm.news.length - 1);
        } else {
          vm.newsLeftOut += vm.newsItemWidth;
        }
      }
    }

    function newsDetalsToggle() {
       vm.detailedNewsOpened = !vm.detailedNewsOpened;
    }

  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingPage2Route);
  landingPage2Route.$inject = ['$stateProvider'];

  function landingPage2Route($stateProvider) {
    $stateProvider.state('landing.page2', {
      url: '/page2',
      templateUrl: '/view/modules/landing/page2/page2.html',
      controller: 'LandingPage2Controller',
      controllerAs: 'vm',
      data: {
        title: 'page 2'
      }
    });
  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').controller('LandingPage3Controller', LandingPage3Controller);

  LandingPage3Controller.$inject = ['$document', 'WindowEventsService', '$window', '$scope', '$timeout',
  'TeamService', '$stateParams'];
  function LandingPage3Controller($document, WindowEventsService, $window, $scope, $timeout,
     TeamService, $stateParams) {
    var vm = this;

    vm.scrollY = 0;
    vm.menuIsOpen = false;
    vm.toggleMobileMenu = toggleMobileMenu;
    vm.scrollTo = scrollTo;
    vm.windowWidth = $window.innerWidth;
    vm.windowHeight = $window.innerHeight;
    vm.windowY = 0;
    vm.directors = TeamService.directors;
    vm.staff = TeamService.team;

    WindowEventsService.listen(true, 'scroll', defineScrollY);

    function defineScrollY() {
      vm.scrollY = $window.scrollY;
      $scope.$apply();
    }

    function scrollTo(sectionName) {
      $document.scrollToElementAnimated(vm.sections[sectionName].element);
    }

    function toggleMobileMenu() {
      vm.menuIsOpen = !vm.menuIsOpen;
    }

  }
})(angular);

(function(angular) {
  'use strict';
  angular.module('app').config(landingPage3Route);
  landingPage3Route.$inject = ['$stateProvider'];

  function landingPage3Route($stateProvider) {
    $stateProvider.state('landing.page3', {
      url: '/page3',
      templateUrl: '/view/modules/landing/page3/page3.html',
      controller: 'LandingPage3Controller',
      controllerAs: 'vm',
      data: {
        title: 'page 3'
      }
    });
  }
})(angular);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
